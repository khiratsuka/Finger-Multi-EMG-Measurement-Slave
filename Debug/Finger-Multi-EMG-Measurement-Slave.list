
Finger-Multi-EMG-Measurement-Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003578  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003634  08003634  00013634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800366c  0800366c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800366c  0800366c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0001366c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08003680  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003680  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f9b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a28  00000000  00000000  00029fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000728  00000000  00000000  0002c1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3f1  00000000  00000000  0002c8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000acb5  00000000  00000000  00046ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f5b6  00000000  00000000  00051996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0f4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a84  00000000  00000000  000f0f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800361c 	.word	0x0800361c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800361c 	.word	0x0800361c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b099      	sub	sp, #100	; 0x64
 80003f4:	af00      	add	r7, sp, #0

  //筋電位センサのデータ格納用
  __IO uint16_t sensor_raw_data[SENSOR_NUM];
  uint16_t sensor_data[SENSOR_NUM];
  uint16_t sensor_data_0, sensor_data_1, sensor_data_2, sensor_data_3, sensor_data_4, sensor_data_5, sensor_data_6, sensor_data_7;
  const int pickup2dec = 100;
 80003f6:	2364      	movs	r3, #100	; 0x64
 80003f8:	657b      	str	r3, [r7, #84]	; 0x54
  const int pickupParity = 0x00FF;
 80003fa:	23ff      	movs	r3, #255	; 0xff
 80003fc:	653b      	str	r3, [r7, #80]	; 0x50
  int upper2dec = 0, lower2dec = 0;	//センサ生値を二桁に分けて入れる
 80003fe:	2300      	movs	r3, #0
 8000400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000402:	2300      	movs	r3, #0
 8000404:	64bb      	str	r3, [r7, #72]	; 0x48
  int parity = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	65fb      	str	r3, [r7, #92]	; 0x5c

  //USARTデータ送信用
  uint8_t sensor_send_data[20] = {};	//[h(0xFE), データ個数, x.xxx, ..., パリティ, f] -> length = 1 + 1 + 2 * 8 + 1 + 1 = 20
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	3304      	adds	r3, #4
 8000412:	2210      	movs	r2, #16
 8000414:	2100      	movs	r1, #0
 8000416:	0018      	movs	r0, r3
 8000418:	f003 f8f8 	bl	800360c <memset>
  sensor_send_data[0] = 0xFE;	//ヘッダ
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	22fe      	movs	r2, #254	; 0xfe
 8000420:	701a      	strb	r2, [r3, #0]
  sensor_send_data[1] = 9;		//データ個数
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	2209      	movs	r2, #9
 8000426:	705a      	strb	r2, [r3, #1]
  sensor_send_data[19] = 0xFF;	//フッタ
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	22ff      	movs	r2, #255	; 0xff
 800042c:	74da      	strb	r2, [r3, #19]
  uint32_t start_code = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fc0b 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f897 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043a:	f000 fa03 	bl	8000844 <MX_GPIO_Init>
  MX_DMA_Init();
 800043e:	f000 f9e3 	bl	8000808 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000442:	f000 f9af 	bl	80007a4 <MX_USART2_UART_Init>
  MX_ADC_Init();
 8000446:	f000 f8f7 	bl	8000638 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  //ADCのキャリブレーション
  if (HAL_ADCEx_Calibration_Start(&hadc) !=  HAL_OK)
 800044a:	4b45      	ldr	r3, [pc, #276]	; (8000560 <main+0x170>)
 800044c:	0018      	movs	r0, r3
 800044e:	f001 f851 	bl	80014f4 <HAL_ADCEx_Calibration_Start>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <main+0x6a>
  {
    Error_Handler();
 8000456:	f000 fa6d 	bl	8000934 <Error_Handler>
  }

  //DMAを用いて8ポートまとめてADC
  if (HAL_ADC_Start_DMA(&hadc, (uint32_t *)sensor_raw_data, SENSOR_NUM) != HAL_OK)
 800045a:	2328      	movs	r3, #40	; 0x28
 800045c:	18f9      	adds	r1, r7, r3
 800045e:	4b40      	ldr	r3, [pc, #256]	; (8000560 <main+0x170>)
 8000460:	2208      	movs	r2, #8
 8000462:	0018      	movs	r0, r3
 8000464:	f000 fd96 	bl	8000f94 <HAL_ADC_Start_DMA>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d001      	beq.n	8000470 <main+0x80>
  {
    Error_Handler();
 800046c:	f000 fa62 	bl	8000934 <Error_Handler>
  }

  //受信側UARTプログラム待ち
  while(1){
	  HAL_UART_Receive(&huart2, &start_code, sizeof(start_code), 1);
 8000470:	0039      	movs	r1, r7
 8000472:	483c      	ldr	r0, [pc, #240]	; (8000564 <main+0x174>)
 8000474:	2301      	movs	r3, #1
 8000476:	2204      	movs	r2, #4
 8000478:	f002 fc0c 	bl	8002c94 <HAL_UART_Receive>
	  if(start_code == 0xFF)	break;
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	2bff      	cmp	r3, #255	; 0xff
 8000480:	d1f6      	bne.n	8000470 <main+0x80>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    sensor_data_0 = sensor_raw_data[0];
 8000482:	2346      	movs	r3, #70	; 0x46
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	2128      	movs	r1, #40	; 0x28
 8000488:	187a      	adds	r2, r7, r1
 800048a:	8812      	ldrh	r2, [r2, #0]
 800048c:	801a      	strh	r2, [r3, #0]
    sensor_data_1 = sensor_raw_data[1];
 800048e:	2344      	movs	r3, #68	; 0x44
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	187a      	adds	r2, r7, r1
 8000494:	8852      	ldrh	r2, [r2, #2]
 8000496:	801a      	strh	r2, [r3, #0]
    sensor_data_2 = sensor_raw_data[2];
 8000498:	2342      	movs	r3, #66	; 0x42
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	187a      	adds	r2, r7, r1
 800049e:	8892      	ldrh	r2, [r2, #4]
 80004a0:	801a      	strh	r2, [r3, #0]
    sensor_data_3 = sensor_raw_data[3];
 80004a2:	2340      	movs	r3, #64	; 0x40
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	187a      	adds	r2, r7, r1
 80004a8:	88d2      	ldrh	r2, [r2, #6]
 80004aa:	801a      	strh	r2, [r3, #0]
    sensor_data_4 = sensor_raw_data[4];
 80004ac:	233e      	movs	r3, #62	; 0x3e
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	8912      	ldrh	r2, [r2, #8]
 80004b4:	801a      	strh	r2, [r3, #0]
    sensor_data_5 = sensor_raw_data[5];
 80004b6:	233c      	movs	r3, #60	; 0x3c
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	187a      	adds	r2, r7, r1
 80004bc:	8952      	ldrh	r2, [r2, #10]
 80004be:	801a      	strh	r2, [r3, #0]
    sensor_data_6 = sensor_raw_data[6];
 80004c0:	233a      	movs	r3, #58	; 0x3a
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	187a      	adds	r2, r7, r1
 80004c6:	8992      	ldrh	r2, [r2, #12]
 80004c8:	801a      	strh	r2, [r3, #0]
    sensor_data_7 = sensor_raw_data[7];
 80004ca:	2338      	movs	r3, #56	; 0x38
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	187a      	adds	r2, r7, r1
 80004d0:	89d2      	ldrh	r2, [r2, #14]
 80004d2:	801a      	strh	r2, [r3, #0]
    parity = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(int i = 0; i < SENSOR_NUM; i++){
 80004d8:	2300      	movs	r3, #0
 80004da:	65bb      	str	r3, [r7, #88]	; 0x58
 80004dc:	e02d      	b.n	800053a <main+0x14a>
    	upper2dec = sensor_raw_data[i] / pickup2dec;
 80004de:	2428      	movs	r4, #40	; 0x28
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80004e4:	0052      	lsls	r2, r2, #1
 80004e6:	5ad3      	ldrh	r3, [r2, r3]
 80004e8:	b29b      	uxth	r3, r3
 80004ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80004ec:	0018      	movs	r0, r3
 80004ee:	f7ff fe93 	bl	8000218 <__divsi3>
 80004f2:	0003      	movs	r3, r0
 80004f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    	lower2dec = sensor_raw_data[i] % pickup2dec;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80004fa:	0052      	lsls	r2, r2, #1
 80004fc:	5ad3      	ldrh	r3, [r2, r3]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff ff6e 	bl	80003e4 <__aeabi_idivmod>
 8000508:	000b      	movs	r3, r1
 800050a:	64bb      	str	r3, [r7, #72]	; 0x48
    	sensor_send_data[(2 * i) + 2] = upper2dec;
 800050c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800050e:	3301      	adds	r3, #1
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000514:	b2d1      	uxtb	r1, r2
 8000516:	1d3a      	adds	r2, r7, #4
 8000518:	54d1      	strb	r1, [r2, r3]
    	sensor_send_data[(2 * i) + 3] = lower2dec;
 800051a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	3303      	adds	r3, #3
 8000520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000522:	b2d1      	uxtb	r1, r2
 8000524:	1d3a      	adds	r2, r7, #4
 8000526:	54d1      	strb	r1, [r2, r3]
    	parity = parity + upper2dec + lower2dec;
 8000528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800052a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800052c:	18d3      	adds	r3, r2, r3
 800052e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(int i = 0; i < SENSOR_NUM; i++){
 8000534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000536:	3301      	adds	r3, #1
 8000538:	65bb      	str	r3, [r7, #88]	; 0x58
 800053a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800053c:	2b07      	cmp	r3, #7
 800053e:	ddce      	ble.n	80004de <main+0xee>
    }
    sensor_send_data[18]= parity & pickupParity;
 8000540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000542:	b25b      	sxtb	r3, r3
 8000544:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000546:	b252      	sxtb	r2, r2
 8000548:	4013      	ands	r3, r2
 800054a:	b25b      	sxtb	r3, r3
 800054c:	b2da      	uxtb	r2, r3
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	749a      	strb	r2, [r3, #18]


    HAL_UART_Transmit(&huart2, &sensor_send_data, sizeof(sensor_send_data), 50);
 8000552:	1d39      	adds	r1, r7, #4
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <main+0x174>)
 8000556:	2332      	movs	r3, #50	; 0x32
 8000558:	2214      	movs	r2, #20
 800055a:	f002 faf1 	bl	8002b40 <HAL_UART_Transmit>
    sensor_data_0 = sensor_raw_data[0];
 800055e:	e790      	b.n	8000482 <main+0x92>
 8000560:	20000028 	.word	0x20000028
 8000564:	200000ac 	.word	0x200000ac

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b099      	sub	sp, #100	; 0x64
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	242c      	movs	r4, #44	; 0x2c
 8000570:	193b      	adds	r3, r7, r4
 8000572:	0018      	movs	r0, r3
 8000574:	2334      	movs	r3, #52	; 0x34
 8000576:	001a      	movs	r2, r3
 8000578:	2100      	movs	r1, #0
 800057a:	f003 f847 	bl	800360c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057e:	231c      	movs	r3, #28
 8000580:	18fb      	adds	r3, r7, r3
 8000582:	0018      	movs	r0, r3
 8000584:	2310      	movs	r3, #16
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f003 f83f 	bl	800360c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800058e:	003b      	movs	r3, r7
 8000590:	0018      	movs	r0, r3
 8000592:	231c      	movs	r3, #28
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f003 f838 	bl	800360c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800059c:	0021      	movs	r1, r4
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2212      	movs	r2, #18
 80005a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2201      	movs	r2, #1
 80005ae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2210      	movs	r2, #16
 80005b4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2210      	movs	r2, #16
 80005ba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2202      	movs	r2, #2
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	0212      	lsls	r2, r2, #8
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	22a0      	movs	r2, #160	; 0xa0
 80005ce:	0392      	lsls	r2, r2, #14
 80005d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2201      	movs	r2, #1
 80005d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fc5c 	bl	8001e98 <HAL_RCC_OscConfig>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e4:	f000 f9a6 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	211c      	movs	r1, #28
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2207      	movs	r2, #7
 80005ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2202      	movs	r2, #2
 80005f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000602:	187b      	adds	r3, r7, r1
 8000604:	2101      	movs	r1, #1
 8000606:	0018      	movs	r0, r3
 8000608:	f001 ffcc 	bl	80025a4 <HAL_RCC_ClockConfig>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000610:	f000 f990 	bl	8000934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000614:	003b      	movs	r3, r7
 8000616:	2202      	movs	r2, #2
 8000618:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800061a:	003b      	movs	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000620:	003b      	movs	r3, r7
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f938 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800062c:	f000 f982 	bl	8000934 <Error_Handler>
  }
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b019      	add	sp, #100	; 0x64
 8000636:	bd90      	pop	{r4, r7, pc}

08000638 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	0018      	movs	r0, r3
 8000642:	230c      	movs	r3, #12
 8000644:	001a      	movs	r2, r3
 8000646:	2100      	movs	r1, #0
 8000648:	f002 ffe0 	bl	800360c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800064c:	4b53      	ldr	r3, [pc, #332]	; (800079c <MX_ADC_Init+0x164>)
 800064e:	4a54      	ldr	r2, [pc, #336]	; (80007a0 <MX_ADC_Init+0x168>)
 8000650:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <MX_ADC_Init+0x164>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b50      	ldr	r3, [pc, #320]	; (800079c <MX_ADC_Init+0x164>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <MX_ADC_Init+0x164>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000664:	4b4d      	ldr	r3, [pc, #308]	; (800079c <MX_ADC_Init+0x164>)
 8000666:	2201      	movs	r2, #1
 8000668:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <MX_ADC_Init+0x164>)
 800066c:	2204      	movs	r2, #4
 800066e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000670:	4b4a      	ldr	r3, [pc, #296]	; (800079c <MX_ADC_Init+0x164>)
 8000672:	2200      	movs	r2, #0
 8000674:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000676:	4b49      	ldr	r3, [pc, #292]	; (800079c <MX_ADC_Init+0x164>)
 8000678:	2200      	movs	r2, #0
 800067a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800067c:	4b47      	ldr	r3, [pc, #284]	; (800079c <MX_ADC_Init+0x164>)
 800067e:	2201      	movs	r2, #1
 8000680:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b46      	ldr	r3, [pc, #280]	; (800079c <MX_ADC_Init+0x164>)
 8000684:	2200      	movs	r2, #0
 8000686:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000688:	4b44      	ldr	r3, [pc, #272]	; (800079c <MX_ADC_Init+0x164>)
 800068a:	22c2      	movs	r2, #194	; 0xc2
 800068c:	32ff      	adds	r2, #255	; 0xff
 800068e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000690:	4b42      	ldr	r3, [pc, #264]	; (800079c <MX_ADC_Init+0x164>)
 8000692:	2200      	movs	r2, #0
 8000694:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000696:	4b41      	ldr	r3, [pc, #260]	; (800079c <MX_ADC_Init+0x164>)
 8000698:	2224      	movs	r2, #36	; 0x24
 800069a:	2101      	movs	r1, #1
 800069c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800069e:	4b3f      	ldr	r3, [pc, #252]	; (800079c <MX_ADC_Init+0x164>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006a4:	4b3d      	ldr	r3, [pc, #244]	; (800079c <MX_ADC_Init+0x164>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fb34 	bl	8000d14 <HAL_ADC_Init>
 80006ac:	1e03      	subs	r3, r0, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006b0:	f000 f940 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2280      	movs	r2, #128	; 0x80
 80006be:	0152      	lsls	r2, r2, #5
 80006c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2207      	movs	r2, #7
 80006c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c8:	1d3a      	adds	r2, r7, #4
 80006ca:	4b34      	ldr	r3, [pc, #208]	; (800079c <MX_ADC_Init+0x164>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fcfa 	bl	80010c8 <HAL_ADC_ConfigChannel>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80006d8:	f000 f92c 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006e2:	1d3a      	adds	r2, r7, #4
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_ADC_Init+0x164>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f000 fced 	bl	80010c8 <HAL_ADC_ConfigChannel>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80006f2:	f000 f91f 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2204      	movs	r2, #4
 80006fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006fc:	1d3a      	adds	r2, r7, #4
 80006fe:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC_Init+0x164>)
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fce0 	bl	80010c8 <HAL_ADC_ConfigChannel>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800070c:	f000 f912 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2206      	movs	r2, #6
 8000714:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000716:	1d3a      	adds	r2, r7, #4
 8000718:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC_Init+0x164>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fcd3 	bl	80010c8 <HAL_ADC_ConfigChannel>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000726:	f000 f905 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000730:	1d3a      	adds	r2, r7, #4
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_ADC_Init+0x164>)
 8000734:	0011      	movs	r1, r2
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fcc6 	bl	80010c8 <HAL_ADC_ConfigChannel>
 800073c:	1e03      	subs	r3, r0, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000740:	f000 f8f8 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	2208      	movs	r2, #8
 8000748:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800074a:	1d3a      	adds	r2, r7, #4
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC_Init+0x164>)
 800074e:	0011      	movs	r1, r2
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fcb9 	bl	80010c8 <HAL_ADC_ConfigChannel>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800075a:	f000 f8eb 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2209      	movs	r2, #9
 8000762:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000764:	1d3a      	adds	r2, r7, #4
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <MX_ADC_Init+0x164>)
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fcac 	bl	80010c8 <HAL_ADC_ConfigChannel>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000774:	f000 f8de 	bl	8000934 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	220a      	movs	r2, #10
 800077c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800077e:	1d3a      	adds	r2, r7, #4
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_ADC_Init+0x164>)
 8000782:	0011      	movs	r1, r2
 8000784:	0018      	movs	r0, r3
 8000786:	f000 fc9f 	bl	80010c8 <HAL_ADC_ConfigChannel>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800078e:	f000 f8d1 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b004      	add	sp, #16
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000028 	.word	0x20000028
 80007a0:	40012400 	.word	0x40012400

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART2_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 470588;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x60>)
 80007b2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007c8:	220c      	movs	r2, #12
 80007ca:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007de:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x58>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f002 f956 	bl	8002a98 <HAL_UART_Init>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80007f0:	f000 f8a0 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f4:	46c0      	nop			; (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	200000ac 	.word	0x200000ac
 8000800:	40004400 	.word	0x40004400
 8000804:	00072e3c 	.word	0x00072e3c

08000808 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_DMA_Init+0x38>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_DMA_Init+0x38>)
 8000814:	2101      	movs	r1, #1
 8000816:	430a      	orrs	r2, r1
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_DMA_Init+0x38>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	2201      	movs	r2, #1
 8000820:	4013      	ands	r3, r2
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2009      	movs	r0, #9
 800082c:	f000 ffb6 	bl	800179c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000830:	2009      	movs	r0, #9
 8000832:	f000 ffc8 	bl	80017c6 <HAL_NVIC_EnableIRQ>

}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			; (mov r8, r8)
 8000840:	40021000 	.word	0x40021000

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b08b      	sub	sp, #44	; 0x2c
 8000848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	2414      	movs	r4, #20
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	2314      	movs	r3, #20
 8000852:	001a      	movs	r2, r3
 8000854:	2100      	movs	r1, #0
 8000856:	f002 fed9 	bl	800360c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b34      	ldr	r3, [pc, #208]	; (800092c <MX_GPIO_Init+0xe8>)
 800085c:	695a      	ldr	r2, [r3, #20]
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0xe8>)
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0309      	lsls	r1, r1, #12
 8000864:	430a      	orrs	r2, r1
 8000866:	615a      	str	r2, [r3, #20]
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_GPIO_Init+0xe8>)
 800086a:	695a      	ldr	r2, [r3, #20]
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	031b      	lsls	r3, r3, #12
 8000870:	4013      	ands	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_GPIO_Init+0xe8>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0xe8>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	03c9      	lsls	r1, r1, #15
 8000880:	430a      	orrs	r2, r1
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_GPIO_Init+0xe8>)
 8000886:	695a      	ldr	r2, [r3, #20]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	03db      	lsls	r3, r3, #15
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0xe8>)
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_GPIO_Init+0xe8>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0289      	lsls	r1, r1, #10
 800089c:	430a      	orrs	r2, r1
 800089e:	615a      	str	r2, [r3, #20]
 80008a0:	4b22      	ldr	r3, [pc, #136]	; (800092c <MX_GPIO_Init+0xe8>)
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	029b      	lsls	r3, r3, #10
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_GPIO_Init+0xe8>)
 80008b0:	695a      	ldr	r2, [r3, #20]
 80008b2:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_GPIO_Init+0xe8>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	02c9      	lsls	r1, r1, #11
 80008b8:	430a      	orrs	r2, r1
 80008ba:	615a      	str	r2, [r3, #20]
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_GPIO_Init+0xe8>)
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	02db      	lsls	r3, r3, #11
 80008c4:	4013      	ands	r3, r2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2390      	movs	r3, #144	; 0x90
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 fac2 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2280      	movs	r2, #128	; 0x80
 80008dc:	0192      	lsls	r2, r2, #6
 80008de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2284      	movs	r2, #132	; 0x84
 80008e4:	0392      	lsls	r2, r2, #14
 80008e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <MX_GPIO_Init+0xec>)
 80008f2:	0019      	movs	r1, r3
 80008f4:	0010      	movs	r0, r2
 80008f6:	f001 f939 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008fa:	0021      	movs	r1, r4
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2220      	movs	r2, #32
 8000900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2201      	movs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000914:	187a      	adds	r2, r7, r1
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f001 f925 	bl	8001b6c <HAL_GPIO_Init>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b00b      	add	sp, #44	; 0x2c
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000
 8000930:	48000800 	.word	0x48000800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	699a      	ldr	r2, [r3, #24]
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	2101      	movs	r1, #1
 800094e:	430a      	orrs	r2, r1
 8000950:	619a      	str	r2, [r3, #24]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	2201      	movs	r2, #1
 8000958:	4013      	ands	r3, r2
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	69da      	ldr	r2, [r3, #28]
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0549      	lsls	r1, r1, #21
 8000968:	430a      	orrs	r2, r1
 800096a:	61da      	str	r2, [r3, #28]
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <HAL_MspInit+0x44>)
 800096e:	69da      	ldr	r2, [r3, #28]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	055b      	lsls	r3, r3, #21
 8000974:	4013      	ands	r3, r2
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b08d      	sub	sp, #52	; 0x34
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	241c      	movs	r4, #28
 8000992:	193b      	adds	r3, r7, r4
 8000994:	0018      	movs	r0, r3
 8000996:	2314      	movs	r3, #20
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f002 fe36 	bl	800360c <memset>
  if(hadc->Instance==ADC1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a52      	ldr	r2, [pc, #328]	; (8000af0 <HAL_ADC_MspInit+0x168>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d000      	beq.n	80009ac <HAL_ADC_MspInit+0x24>
 80009aa:	e09d      	b.n	8000ae8 <HAL_ADC_MspInit+0x160>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ac:	4b51      	ldr	r3, [pc, #324]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009ae:	699a      	ldr	r2, [r3, #24]
 80009b0:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	0089      	lsls	r1, r1, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	619a      	str	r2, [r3, #24]
 80009ba:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009bc:	699a      	ldr	r2, [r3, #24]
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	4b4a      	ldr	r3, [pc, #296]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	0309      	lsls	r1, r1, #12
 80009d2:	430a      	orrs	r2, r1
 80009d4:	615a      	str	r2, [r3, #20]
 80009d6:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	031b      	lsls	r3, r3, #12
 80009de:	4013      	ands	r3, r2
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	0289      	lsls	r1, r1, #10
 80009ee:	430a      	orrs	r2, r1
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	2380      	movs	r3, #128	; 0x80
 80009f8:	029b      	lsls	r3, r3, #10
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a00:	4b3c      	ldr	r3, [pc, #240]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 8000a06:	2180      	movs	r1, #128	; 0x80
 8000a08:	02c9      	lsls	r1, r1, #11
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	615a      	str	r2, [r3, #20]
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <HAL_ADC_MspInit+0x16c>)
 8000a10:	695a      	ldr	r2, [r3, #20]
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	02db      	lsls	r3, r3, #11
 8000a16:	4013      	ands	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1c:	193b      	adds	r3, r7, r4
 8000a1e:	2201      	movs	r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	2203      	movs	r2, #3
 8000a26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	193b      	adds	r3, r7, r4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <HAL_ADC_MspInit+0x170>)
 8000a32:	0019      	movs	r1, r3
 8000a34:	0010      	movs	r0, r2
 8000a36:	f001 f899 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	22d3      	movs	r2, #211	; 0xd3
 8000a3e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2203      	movs	r2, #3
 8000a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	193a      	adds	r2, r7, r4
 8000a4e:	2390      	movs	r3, #144	; 0x90
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 f889 	bl	8001b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2203      	movs	r2, #3
 8000a64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <HAL_ADC_MspInit+0x174>)
 8000a70:	0019      	movs	r1, r3
 8000a72:	0010      	movs	r0, r2
 8000a74:	f001 f87a 	bl	8001b6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <HAL_ADC_MspInit+0x17c>)
 8000a7c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000a8c:	2280      	movs	r2, #128	; 0x80
 8000a8e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	0052      	lsls	r2, r2, #1
 8000a96:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000a9a:	2280      	movs	r2, #128	; 0x80
 8000a9c:	00d2      	lsls	r2, r2, #3
 8000a9e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000aa2:	2220      	movs	r2, #32
 8000aa4:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fea6 	bl	8001800 <HAL_DMA_Init>
 8000ab4:	1e03      	subs	r3, r0, #0
 8000ab6:	d001      	beq.n	8000abc <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8000ab8:	f7ff ff3c 	bl	8000934 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_ADC);
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <HAL_ADC_MspInit+0x180>)
 8000abe:	23a8      	movs	r3, #168	; 0xa8
 8000ac0:	58d3      	ldr	r3, [r2, r3]
 8000ac2:	4911      	ldr	r1, [pc, #68]	; (8000b08 <HAL_ADC_MspInit+0x180>)
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	4393      	bics	r3, r2
 8000ac8:	22a8      	movs	r2, #168	; 0xa8
 8000aca:	508b      	str	r3, [r1, r2]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_ADC_MspInit+0x180>)
 8000ace:	23a8      	movs	r3, #168	; 0xa8
 8000ad0:	58d3      	ldr	r3, [r2, r3]
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <HAL_ADC_MspInit+0x180>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	22a8      	movs	r2, #168	; 0xa8
 8000ada:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_ADC_MspInit+0x178>)
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b00d      	add	sp, #52	; 0x34
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	40012400 	.word	0x40012400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000800 	.word	0x48000800
 8000afc:	48000400 	.word	0x48000400
 8000b00:	20000068 	.word	0x20000068
 8000b04:	40020008 	.word	0x40020008
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	2414      	movs	r4, #20
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f002 fd74 	bl	800360c <memset>
  if(huart->Instance==USART2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <HAL_UART_MspInit+0x90>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d132      	bne.n	8000b94 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b30:	69da      	ldr	r2, [r3, #28]
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0289      	lsls	r1, r1, #10
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	61da      	str	r2, [r3, #28]
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b3e:	69da      	ldr	r2, [r3, #28]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	029b      	lsls	r3, r3, #10
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	0289      	lsls	r1, r1, #10
 8000b54:	430a      	orrs	r2, r1
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b5a:	695a      	ldr	r2, [r3, #20]
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	029b      	lsls	r3, r3, #10
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b66:	0021      	movs	r1, r4
 8000b68:	187b      	adds	r3, r7, r1
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	2202      	movs	r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	187b      	adds	r3, r7, r1
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2201      	movs	r2, #1
 8000b84:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	187a      	adds	r2, r7, r1
 8000b88:	2390      	movs	r3, #144	; 0x90
 8000b8a:	05db      	lsls	r3, r3, #23
 8000b8c:	0011      	movs	r1, r2
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 ffec 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b00b      	add	sp, #44	; 0x2c
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f888 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <DMA1_Ch1_IRQHandler+0x14>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f000 febe 	bl	800195c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8000be0:	46c0      	nop			; (mov r8, r8)
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000068 	.word	0x20000068

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480d      	ldr	r0, [pc, #52]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490e      	ldr	r1, [pc, #56]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0b      	ldr	r4, [pc, #44]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c22:	f7ff ffe3 	bl	8000bec <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000c26:	f002 fccd 	bl	80035c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c2a:	f7ff fbe1 	bl	80003f0 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c3c:	08003674 	.word	0x08003674
  ldr r2, =_sbss
 8000c40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c44:	20000134 	.word	0x20000134

08000c48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_COMP_IRQHandler>
	...

08000c4c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <HAL_Init+0x24>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_Init+0x24>)
 8000c56:	2110      	movs	r1, #16
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f809 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c62:	f7ff fe6d 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_InitTick+0x5c>)
 8000c7e:	681c      	ldr	r4, [r3, #0]
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_InitTick+0x60>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	0019      	movs	r1, r3
 8000c86:	23fa      	movs	r3, #250	; 0xfa
 8000c88:	0098      	lsls	r0, r3, #2
 8000c8a:	f7ff fa3b 	bl	8000104 <__udivsi3>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	0019      	movs	r1, r3
 8000c92:	0020      	movs	r0, r4
 8000c94:	f7ff fa36 	bl	8000104 <__udivsi3>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fda3 	bl	80017e6 <HAL_SYSTICK_Config>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e00f      	b.n	8000cc8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d80b      	bhi.n	8000cc6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 fd70 	bl	800179c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_InitTick+0x64>)
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b003      	add	sp, #12
 8000cce:	bd90      	pop	{r4, r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	18d2      	adds	r2, r2, r3
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000130 	.word	0x20000130

08000d00 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20000130 	.word	0x20000130

08000d14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	18fb      	adds	r3, r7, r3
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e125      	b.n	8000f7e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10a      	bne.n	8000d50 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2234      	movs	r2, #52	; 0x34
 8000d44:	2100      	movs	r1, #0
 8000d46:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff fe1c 	bl	8000988 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d54:	2210      	movs	r2, #16
 8000d56:	4013      	ands	r3, r2
 8000d58:	d000      	beq.n	8000d5c <HAL_ADC_Init+0x48>
 8000d5a:	e103      	b.n	8000f64 <HAL_ADC_Init+0x250>
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	18fb      	adds	r3, r7, r3
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d000      	beq.n	8000d68 <HAL_ADC_Init+0x54>
 8000d66:	e0fd      	b.n	8000f64 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000d72:	d000      	beq.n	8000d76 <HAL_ADC_Init+0x62>
 8000d74:	e0f6      	b.n	8000f64 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7a:	4a83      	ldr	r2, [pc, #524]	; (8000f88 <HAL_ADC_Init+0x274>)
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	2202      	movs	r2, #2
 8000d80:	431a      	orrs	r2, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d112      	bne.n	8000dba <HAL_ADC_Init+0xa6>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d009      	beq.n	8000db6 <HAL_ADC_Init+0xa2>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	401a      	ands	r2, r3
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	021b      	lsls	r3, r3, #8
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d101      	bne.n	8000dba <HAL_ADC_Init+0xa6>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <HAL_ADC_Init+0xa8>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d116      	bne.n	8000dee <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2218      	movs	r2, #24
 8000dc8:	4393      	bics	r3, r2
 8000dca:	0019      	movs	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	691b      	ldr	r3, [r3, #16]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	0899      	lsrs	r1, r3, #2
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4964      	ldr	r1, [pc, #400]	; (8000f8c <HAL_ADC_Init+0x278>)
 8000dfa:	400a      	ands	r2, r1
 8000dfc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	7e1b      	ldrb	r3, [r3, #24]
 8000e02:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7e5b      	ldrb	r3, [r3, #25]
 8000e08:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e0a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7e9b      	ldrb	r3, [r3, #26]
 8000e10:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000e12:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d002      	beq.n	8000e22 <HAL_ADC_Init+0x10e>
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	015b      	lsls	r3, r3, #5
 8000e20:	e000      	b.n	8000e24 <HAL_ADC_Init+0x110>
 8000e22:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e24:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000e2a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d101      	bne.n	8000e38 <HAL_ADC_Init+0x124>
 8000e34:	2304      	movs	r3, #4
 8000e36:	e000      	b.n	8000e3a <HAL_ADC_Init+0x126>
 8000e38:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000e3a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2124      	movs	r1, #36	; 0x24
 8000e40:	5c5b      	ldrb	r3, [r3, r1]
 8000e42:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000e44:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7edb      	ldrb	r3, [r3, #27]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d115      	bne.n	8000e80 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7e9b      	ldrb	r3, [r3, #26]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d105      	bne.n	8000e68 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	0252      	lsls	r2, r2, #9
 8000e62:	4313      	orrs	r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	e00b      	b.n	8000e80 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e78:	2201      	movs	r2, #1
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69da      	ldr	r2, [r3, #28]
 8000e84:	23c2      	movs	r3, #194	; 0xc2
 8000e86:	33ff      	adds	r3, #255	; 0xff
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d007      	beq.n	8000e9c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000e94:	4313      	orrs	r3, r2
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	68d9      	ldr	r1, [r3, #12]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	055b      	lsls	r3, r3, #21
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d01b      	beq.n	8000ef0 <HAL_ADC_Init+0x1dc>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d017      	beq.n	8000ef0 <HAL_ADC_Init+0x1dc>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d013      	beq.n	8000ef0 <HAL_ADC_Init+0x1dc>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d00f      	beq.n	8000ef0 <HAL_ADC_Init+0x1dc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d00b      	beq.n	8000ef0 <HAL_ADC_Init+0x1dc>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d007      	beq.n	8000ef0 <HAL_ADC_Init+0x1dc>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee4:	2b06      	cmp	r3, #6
 8000ee6:	d003      	beq.n	8000ef0 <HAL_ADC_Init+0x1dc>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	2b07      	cmp	r3, #7
 8000eee:	d112      	bne.n	8000f16 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2107      	movs	r1, #7
 8000efc:	438a      	bics	r2, r1
 8000efe:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6959      	ldr	r1, [r3, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0a:	2207      	movs	r2, #7
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <HAL_ADC_Init+0x27c>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d10b      	bne.n	8000f3e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f30:	2203      	movs	r2, #3
 8000f32:	4393      	bics	r3, r2
 8000f34:	2201      	movs	r2, #1
 8000f36:	431a      	orrs	r2, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f3c:	e01c      	b.n	8000f78 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f42:	2212      	movs	r2, #18
 8000f44:	4393      	bics	r3, r2
 8000f46:	2210      	movs	r2, #16
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f52:	2201      	movs	r2, #1
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000f62:	e009      	b.n	8000f78 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f68:	2210      	movs	r2, #16
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000f70:	230f      	movs	r3, #15
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f78:	230f      	movs	r3, #15
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	781b      	ldrb	r3, [r3, #0]
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	fffffefd 	.word	0xfffffefd
 8000f8c:	fffe0219 	.word	0xfffe0219
 8000f90:	833fffe7 	.word	0x833fffe7

08000f94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b087      	sub	sp, #28
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa0:	2317      	movs	r3, #23
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2204      	movs	r2, #4
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d15e      	bne.n	8001072 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2234      	movs	r2, #52	; 0x34
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADC_Start_DMA+0x2e>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e05e      	b.n	8001080 <HAL_ADC_Start_DMA+0xec>
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2234      	movs	r2, #52	; 0x34
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	7e5b      	ldrb	r3, [r3, #25]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d007      	beq.n	8000fe2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000fd2:	2317      	movs	r3, #23
 8000fd4:	18fc      	adds	r4, r7, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 f983 	bl	80012e4 <ADC_Enable>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fe2:	2317      	movs	r3, #23
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d146      	bne.n	800107a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff0:	4a25      	ldr	r2, [pc, #148]	; (8001088 <HAL_ADC_Start_DMA+0xf4>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	2280      	movs	r2, #128	; 0x80
 8000ff6:	0052      	lsls	r2, r2, #1
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2234      	movs	r2, #52	; 0x34
 8001008:	2100      	movs	r1, #0
 800100a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_ADC_Start_DMA+0xf8>)
 8001012:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	4a1d      	ldr	r2, [pc, #116]	; (8001090 <HAL_ADC_Start_DMA+0xfc>)
 800101a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001020:	4a1c      	ldr	r2, [pc, #112]	; (8001094 <HAL_ADC_Start_DMA+0x100>)
 8001022:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	221c      	movs	r2, #28
 800102a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2110      	movs	r1, #16
 8001038:	430a      	orrs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2101      	movs	r1, #1
 8001048:	430a      	orrs	r2, r1
 800104a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	3340      	adds	r3, #64	; 0x40
 8001056:	0019      	movs	r1, r3
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f000 fc18 	bl	8001890 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2104      	movs	r1, #4
 800106c:	430a      	orrs	r2, r1
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	e003      	b.n	800107a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001072:	2317      	movs	r3, #23
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800107a:	2317      	movs	r3, #23
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b007      	add	sp, #28
 8001086:	bd90      	pop	{r4, r7, pc}
 8001088:	fffff0fe 	.word	0xfffff0fe
 800108c:	080013ed 	.word	0x080013ed
 8001090:	080014a1 	.word	0x080014a1
 8001094:	080014bf 	.word	0x080014bf

08001098 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b002      	add	sp, #8
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d2:	230f      	movs	r3, #15
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	055b      	lsls	r3, r3, #21
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d011      	beq.n	800110e <HAL_ADC_ConfigChannel+0x46>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d00d      	beq.n	800110e <HAL_ADC_ConfigChannel+0x46>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d009      	beq.n	800110e <HAL_ADC_ConfigChannel+0x46>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d005      	beq.n	800110e <HAL_ADC_ConfigChannel+0x46>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001106:	2b04      	cmp	r3, #4
 8001108:	d001      	beq.n	800110e <HAL_ADC_ConfigChannel+0x46>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2234      	movs	r2, #52	; 0x34
 8001112:	5c9b      	ldrb	r3, [r3, r2]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConfigChannel+0x54>
 8001118:	2302      	movs	r3, #2
 800111a:	e0d0      	b.n	80012be <HAL_ADC_ConfigChannel+0x1f6>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2234      	movs	r2, #52	; 0x34
 8001120:	2101      	movs	r1, #1
 8001122:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2204      	movs	r2, #4
 800112c:	4013      	ands	r3, r2
 800112e:	d000      	beq.n	8001132 <HAL_ADC_ConfigChannel+0x6a>
 8001130:	e0b4      	b.n	800129c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a64      	ldr	r2, [pc, #400]	; (80012c8 <HAL_ADC_ConfigChannel+0x200>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d100      	bne.n	800113e <HAL_ADC_ConfigChannel+0x76>
 800113c:	e082      	b.n	8001244 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2201      	movs	r2, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	055b      	lsls	r3, r3, #21
 800115c:	429a      	cmp	r2, r3
 800115e:	d037      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	2b01      	cmp	r3, #1
 8001166:	d033      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	2b02      	cmp	r3, #2
 800116e:	d02f      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	2b03      	cmp	r3, #3
 8001176:	d02b      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117c:	2b04      	cmp	r3, #4
 800117e:	d027      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	2b05      	cmp	r3, #5
 8001186:	d023      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800118c:	2b06      	cmp	r3, #6
 800118e:	d01f      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	2b07      	cmp	r3, #7
 8001196:	d01b      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	2107      	movs	r1, #7
 80011a4:	400b      	ands	r3, r1
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d012      	beq.n	80011d0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2107      	movs	r1, #7
 80011b6:	438a      	bics	r2, r1
 80011b8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	6959      	ldr	r1, [r3, #20]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2207      	movs	r2, #7
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b10      	cmp	r3, #16
 80011d6:	d007      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0x120>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b11      	cmp	r3, #17
 80011de:	d003      	beq.n	80011e8 <HAL_ADC_ConfigChannel+0x120>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b12      	cmp	r3, #18
 80011e6:	d163      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <HAL_ADC_ConfigChannel+0x204>)
 80011ea:	6819      	ldr	r1, [r3, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b10      	cmp	r3, #16
 80011f2:	d009      	beq.n	8001208 <HAL_ADC_ConfigChannel+0x140>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b11      	cmp	r3, #17
 80011fa:	d102      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x13a>
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	03db      	lsls	r3, r3, #15
 8001200:	e004      	b.n	800120c <HAL_ADC_ConfigChannel+0x144>
 8001202:	2380      	movs	r3, #128	; 0x80
 8001204:	045b      	lsls	r3, r3, #17
 8001206:	e001      	b.n	800120c <HAL_ADC_ConfigChannel+0x144>
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	4a2f      	ldr	r2, [pc, #188]	; (80012cc <HAL_ADC_ConfigChannel+0x204>)
 800120e:	430b      	orrs	r3, r1
 8001210:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d14a      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_ADC_ConfigChannel+0x208>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	492d      	ldr	r1, [pc, #180]	; (80012d4 <HAL_ADC_ConfigChannel+0x20c>)
 8001220:	0018      	movs	r0, r3
 8001222:	f7fe ff6f 	bl	8000104 <__udivsi3>
 8001226:	0003      	movs	r3, r0
 8001228:	001a      	movs	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	189b      	adds	r3, r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001234:	e002      	b.n	800123c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x16e>
 8001242:	e035      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2101      	movs	r1, #1
 8001250:	4099      	lsls	r1, r3
 8001252:	000b      	movs	r3, r1
 8001254:	43d9      	mvns	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b10      	cmp	r3, #16
 8001264:	d007      	beq.n	8001276 <HAL_ADC_ConfigChannel+0x1ae>
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b11      	cmp	r3, #17
 800126c:	d003      	beq.n	8001276 <HAL_ADC_ConfigChannel+0x1ae>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b12      	cmp	r3, #18
 8001274:	d11c      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_ADC_ConfigChannel+0x204>)
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b10      	cmp	r3, #16
 8001280:	d007      	beq.n	8001292 <HAL_ADC_ConfigChannel+0x1ca>
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b11      	cmp	r3, #17
 8001288:	d101      	bne.n	800128e <HAL_ADC_ConfigChannel+0x1c6>
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <HAL_ADC_ConfigChannel+0x210>)
 800128c:	e002      	b.n	8001294 <HAL_ADC_ConfigChannel+0x1cc>
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_ADC_ConfigChannel+0x214>)
 8001290:	e000      	b.n	8001294 <HAL_ADC_ConfigChannel+0x1cc>
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <HAL_ADC_ConfigChannel+0x218>)
 8001294:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <HAL_ADC_ConfigChannel+0x204>)
 8001296:	400b      	ands	r3, r1
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e009      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a0:	2220      	movs	r2, #32
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2234      	movs	r2, #52	; 0x34
 80012b4:	2100      	movs	r1, #0
 80012b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80012b8:	230f      	movs	r3, #15
 80012ba:	18fb      	adds	r3, r7, r3
 80012bc:	781b      	ldrb	r3, [r3, #0]
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b004      	add	sp, #16
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	00001001 	.word	0x00001001
 80012cc:	40012708 	.word	0x40012708
 80012d0:	20000000 	.word	0x20000000
 80012d4:	000f4240 	.word	0x000f4240
 80012d8:	ffbfffff 	.word	0xffbfffff
 80012dc:	feffffff 	.word	0xfeffffff
 80012e0:	ff7fffff 	.word	0xff7fffff

080012e4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2203      	movs	r2, #3
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d112      	bne.n	8001328 <ADC_Enable+0x44>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2201      	movs	r2, #1
 800130a:	4013      	ands	r3, r2
 800130c:	2b01      	cmp	r3, #1
 800130e:	d009      	beq.n	8001324 <ADC_Enable+0x40>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	401a      	ands	r2, r3
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	021b      	lsls	r3, r3, #8
 8001320:	429a      	cmp	r2, r3
 8001322:	d101      	bne.n	8001328 <ADC_Enable+0x44>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <ADC_Enable+0x46>
 8001328:	2300      	movs	r3, #0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d152      	bne.n	80013d4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a2a      	ldr	r2, [pc, #168]	; (80013e0 <ADC_Enable+0xfc>)
 8001336:	4013      	ands	r3, r2
 8001338:	d00d      	beq.n	8001356 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800133e:	2210      	movs	r2, #16
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800134a:	2201      	movs	r2, #1
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e03f      	b.n	80013d6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2101      	movs	r1, #1
 8001362:	430a      	orrs	r2, r1
 8001364:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <ADC_Enable+0x100>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	491f      	ldr	r1, [pc, #124]	; (80013e8 <ADC_Enable+0x104>)
 800136c:	0018      	movs	r0, r3
 800136e:	f7fe fec9 	bl	8000104 <__udivsi3>
 8001372:	0003      	movs	r3, r0
 8001374:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001376:	e002      	b.n	800137e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3b01      	subs	r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1f9      	bne.n	8001378 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001384:	f7ff fcbc 	bl	8000d00 <HAL_GetTick>
 8001388:	0003      	movs	r3, r0
 800138a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800138c:	e01b      	b.n	80013c6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800138e:	f7ff fcb7 	bl	8000d00 <HAL_GetTick>
 8001392:	0002      	movs	r2, r0
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d914      	bls.n	80013c6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2201      	movs	r2, #1
 80013a4:	4013      	ands	r3, r2
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d00d      	beq.n	80013c6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ae:	2210      	movs	r2, #16
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	2201      	movs	r2, #1
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e007      	b.n	80013d6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2201      	movs	r2, #1
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d1dc      	bne.n	800138e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b004      	add	sp, #16
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	80000017 	.word	0x80000017
 80013e4:	20000000 	.word	0x20000000
 80013e8:	000f4240 	.word	0x000f4240

080013ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fe:	2250      	movs	r2, #80	; 0x50
 8001400:	4013      	ands	r3, r2
 8001402:	d140      	bne.n	8001486 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	431a      	orrs	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	23c0      	movs	r3, #192	; 0xc0
 800141a:	011b      	lsls	r3, r3, #4
 800141c:	4013      	ands	r3, r2
 800141e:	d12d      	bne.n	800147c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001424:	2b00      	cmp	r3, #0
 8001426:	d129      	bne.n	800147c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2208      	movs	r2, #8
 8001430:	4013      	ands	r3, r2
 8001432:	2b08      	cmp	r3, #8
 8001434:	d122      	bne.n	800147c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2204      	movs	r2, #4
 800143e:	4013      	ands	r3, r2
 8001440:	d110      	bne.n	8001464 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	210c      	movs	r1, #12
 800144e:	438a      	bics	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001456:	4a11      	ldr	r2, [pc, #68]	; (800149c <ADC_DMAConvCplt+0xb0>)
 8001458:	4013      	ands	r3, r2
 800145a:	2201      	movs	r2, #1
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	639a      	str	r2, [r3, #56]	; 0x38
 8001462:	e00b      	b.n	800147c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001468:	2220      	movs	r2, #32
 800146a:	431a      	orrs	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001474:	2201      	movs	r2, #1
 8001476:	431a      	orrs	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	0018      	movs	r0, r3
 8001480:	f7ff fe0a 	bl	8001098 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001484:	e005      	b.n	8001492 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	0010      	movs	r0, r2
 8001490:	4798      	blx	r3
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b004      	add	sp, #16
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	fffffefe 	.word	0xfffffefe

080014a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fdf9 	bl	80010a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}

080014be <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b084      	sub	sp, #16
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d0:	2240      	movs	r2, #64	; 0x40
 80014d2:	431a      	orrs	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014dc:	2204      	movs	r2, #4
 80014de:	431a      	orrs	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	0018      	movs	r0, r3
 80014e8:	f7ff fde6 	bl	80010b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	b004      	add	sp, #16
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fc:	2317      	movs	r3, #23
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2234      	movs	r2, #52	; 0x34
 8001510:	5c9b      	ldrb	r3, [r3, r2]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <HAL_ADCEx_Calibration_Start+0x26>
 8001516:	2302      	movs	r3, #2
 8001518:	e08d      	b.n	8001636 <HAL_ADCEx_Calibration_Start+0x142>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2234      	movs	r2, #52	; 0x34
 800151e:	2101      	movs	r1, #1
 8001520:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2203      	movs	r2, #3
 800152a:	4013      	ands	r3, r2
 800152c:	2b01      	cmp	r3, #1
 800152e:	d112      	bne.n	8001556 <HAL_ADCEx_Calibration_Start+0x62>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	4013      	ands	r3, r2
 800153a:	2b01      	cmp	r3, #1
 800153c:	d009      	beq.n	8001552 <HAL_ADCEx_Calibration_Start+0x5e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	401a      	ands	r2, r3
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	429a      	cmp	r2, r3
 8001550:	d101      	bne.n	8001556 <HAL_ADCEx_Calibration_Start+0x62>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_ADCEx_Calibration_Start+0x64>
 8001556:	2300      	movs	r3, #0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d15b      	bne.n	8001614 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001560:	4a37      	ldr	r2, [pc, #220]	; (8001640 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001562:	4013      	ands	r3, r2
 8001564:	2202      	movs	r2, #2
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2203      	movs	r2, #3
 8001574:	4013      	ands	r3, r2
 8001576:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2103      	movs	r1, #3
 8001584:	438a      	bics	r2, r1
 8001586:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0609      	lsls	r1, r1, #24
 8001596:	430a      	orrs	r2, r1
 8001598:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800159a:	f7ff fbb1 	bl	8000d00 <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015a2:	e01d      	b.n	80015e0 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80015a4:	f7ff fbac 	bl	8000d00 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d916      	bls.n	80015e0 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	0fdb      	lsrs	r3, r3, #31
 80015ba:	07da      	lsls	r2, r3, #31
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	061b      	lsls	r3, r3, #24
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d10d      	bne.n	80015e0 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c8:	2212      	movs	r2, #18
 80015ca:	4393      	bics	r3, r2
 80015cc:	2210      	movs	r2, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2234      	movs	r2, #52	; 0x34
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e02a      	b.n	8001636 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	0fdb      	lsrs	r3, r3, #31
 80015e8:	07da      	lsls	r2, r3, #31
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d0d8      	beq.n	80015a4 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68d9      	ldr	r1, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	430a      	orrs	r2, r1
 8001600:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001606:	2203      	movs	r2, #3
 8001608:	4393      	bics	r3, r2
 800160a:	2201      	movs	r2, #1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	639a      	str	r2, [r3, #56]	; 0x38
 8001612:	e009      	b.n	8001628 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001618:	2220      	movs	r2, #32
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001620:	2317      	movs	r3, #23
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2201      	movs	r2, #1
 8001626:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2234      	movs	r2, #52	; 0x34
 800162c:	2100      	movs	r1, #0
 800162e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001630:	2317      	movs	r3, #23
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b006      	add	sp, #24
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	fffffefd 	.word	0xfffffefd

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	0002      	movs	r2, r0
 800164c:	1dfb      	adds	r3, r7, #7
 800164e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b7f      	cmp	r3, #127	; 0x7f
 8001656:	d809      	bhi.n	800166c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	001a      	movs	r2, r3
 800165e:	231f      	movs	r3, #31
 8001660:	401a      	ands	r2, r3
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_EnableIRQ+0x30>)
 8001664:	2101      	movs	r1, #1
 8001666:	4091      	lsls	r1, r2
 8001668:	000a      	movs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
  }
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	0002      	movs	r2, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b7f      	cmp	r3, #127	; 0x7f
 800168c:	d828      	bhi.n	80016e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168e:	4a2f      	ldr	r2, [pc, #188]	; (800174c <__NVIC_SetPriority+0xd4>)
 8001690:	1dfb      	adds	r3, r7, #7
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	b25b      	sxtb	r3, r3
 8001696:	089b      	lsrs	r3, r3, #2
 8001698:	33c0      	adds	r3, #192	; 0xc0
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	589b      	ldr	r3, [r3, r2]
 800169e:	1dfa      	adds	r2, r7, #7
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	0011      	movs	r1, r2
 80016a4:	2203      	movs	r2, #3
 80016a6:	400a      	ands	r2, r1
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	21ff      	movs	r1, #255	; 0xff
 80016ac:	4091      	lsls	r1, r2
 80016ae:	000a      	movs	r2, r1
 80016b0:	43d2      	mvns	r2, r2
 80016b2:	401a      	ands	r2, r3
 80016b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	019b      	lsls	r3, r3, #6
 80016ba:	22ff      	movs	r2, #255	; 0xff
 80016bc:	401a      	ands	r2, r3
 80016be:	1dfb      	adds	r3, r7, #7
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	0018      	movs	r0, r3
 80016c4:	2303      	movs	r3, #3
 80016c6:	4003      	ands	r3, r0
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016cc:	481f      	ldr	r0, [pc, #124]	; (800174c <__NVIC_SetPriority+0xd4>)
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	089b      	lsrs	r3, r3, #2
 80016d6:	430a      	orrs	r2, r1
 80016d8:	33c0      	adds	r3, #192	; 0xc0
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016de:	e031      	b.n	8001744 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <__NVIC_SetPriority+0xd8>)
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	0019      	movs	r1, r3
 80016e8:	230f      	movs	r3, #15
 80016ea:	400b      	ands	r3, r1
 80016ec:	3b08      	subs	r3, #8
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3306      	adds	r3, #6
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	18d3      	adds	r3, r2, r3
 80016f6:	3304      	adds	r3, #4
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	1dfa      	adds	r2, r7, #7
 80016fc:	7812      	ldrb	r2, [r2, #0]
 80016fe:	0011      	movs	r1, r2
 8001700:	2203      	movs	r2, #3
 8001702:	400a      	ands	r2, r1
 8001704:	00d2      	lsls	r2, r2, #3
 8001706:	21ff      	movs	r1, #255	; 0xff
 8001708:	4091      	lsls	r1, r2
 800170a:	000a      	movs	r2, r1
 800170c:	43d2      	mvns	r2, r2
 800170e:	401a      	ands	r2, r3
 8001710:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	019b      	lsls	r3, r3, #6
 8001716:	22ff      	movs	r2, #255	; 0xff
 8001718:	401a      	ands	r2, r3
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	0018      	movs	r0, r3
 8001720:	2303      	movs	r3, #3
 8001722:	4003      	ands	r3, r0
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001728:	4809      	ldr	r0, [pc, #36]	; (8001750 <__NVIC_SetPriority+0xd8>)
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	001c      	movs	r4, r3
 8001730:	230f      	movs	r3, #15
 8001732:	4023      	ands	r3, r4
 8001734:	3b08      	subs	r3, #8
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	430a      	orrs	r2, r1
 800173a:	3306      	adds	r3, #6
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	18c3      	adds	r3, r0, r3
 8001740:	3304      	adds	r3, #4
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b003      	add	sp, #12
 800174a:	bd90      	pop	{r4, r7, pc}
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	1e5a      	subs	r2, r3, #1
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	045b      	lsls	r3, r3, #17
 8001764:	429a      	cmp	r2, r3
 8001766:	d301      	bcc.n	800176c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001768:	2301      	movs	r3, #1
 800176a:	e010      	b.n	800178e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <SysTick_Config+0x44>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	3a01      	subs	r2, #1
 8001772:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001774:	2301      	movs	r3, #1
 8001776:	425b      	negs	r3, r3
 8001778:	2103      	movs	r1, #3
 800177a:	0018      	movs	r0, r3
 800177c:	f7ff ff7c 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x44>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x44>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	210f      	movs	r1, #15
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	1c02      	adds	r2, r0, #0
 80017ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	187b      	adds	r3, r7, r1
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b25b      	sxtb	r3, r3
 80017b6:	0011      	movs	r1, r2
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff ff5d 	bl	8001678 <__NVIC_SetPriority>
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b004      	add	sp, #16
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	0002      	movs	r2, r0
 80017ce:	1dfb      	adds	r3, r7, #7
 80017d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff ff33 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff ffaf 	bl	8001754 <SysTick_Config>
 80017f6:	0003      	movs	r3, r0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b002      	add	sp, #8
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e036      	b.n	8001884 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2221      	movs	r2, #33	; 0x21
 800181a:	2102      	movs	r1, #2
 800181c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4a18      	ldr	r2, [pc, #96]	; (800188c <HAL_DMA_Init+0x8c>)
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001836:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
 8001854:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4313      	orrs	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	0018      	movs	r0, r3
 8001868:	f000 f946 	bl	8001af8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2221      	movs	r2, #33	; 0x21
 8001876:	2101      	movs	r1, #1
 8001878:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2220      	movs	r2, #32
 800187e:	2100      	movs	r1, #0
 8001880:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}  
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b004      	add	sp, #16
 800188a:	bd80      	pop	{r7, pc}
 800188c:	ffffc00f 	.word	0xffffc00f

08001890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800189e:	2317      	movs	r3, #23
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2220      	movs	r2, #32
 80018aa:	5c9b      	ldrb	r3, [r3, r2]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_DMA_Start_IT+0x24>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e04f      	b.n	8001954 <HAL_DMA_Start_IT+0xc4>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2220      	movs	r2, #32
 80018b8:	2101      	movs	r1, #1
 80018ba:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2221      	movs	r2, #33	; 0x21
 80018c0:	5c9b      	ldrb	r3, [r3, r2]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d13a      	bne.n	800193e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2221      	movs	r2, #33	; 0x21
 80018cc:	2102      	movs	r1, #2
 80018ce:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	438a      	bics	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f000 f8d7 	bl	8001aa0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	210e      	movs	r1, #14
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e00f      	b.n	800192c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	210a      	movs	r1, #10
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2104      	movs	r1, #4
 8001928:	438a      	bics	r2, r1
 800192a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2101      	movs	r1, #1
 8001938:	430a      	orrs	r2, r1
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e007      	b.n	800194e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001946:	2317      	movs	r3, #23
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	2202      	movs	r2, #2
 800194c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800194e:	2317      	movs	r3, #23
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	781b      	ldrb	r3, [r3, #0]
} 
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b006      	add	sp, #24
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	2204      	movs	r2, #4
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4013      	ands	r3, r2
 8001982:	d024      	beq.n	80019ce <HAL_DMA_IRQHandler+0x72>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2204      	movs	r2, #4
 8001988:	4013      	ands	r3, r2
 800198a:	d020      	beq.n	80019ce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2220      	movs	r2, #32
 8001994:	4013      	ands	r3, r2
 8001996:	d107      	bne.n	80019a8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2104      	movs	r1, #4
 80019a4:	438a      	bics	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	2104      	movs	r1, #4
 80019b2:	4091      	lsls	r1, r2
 80019b4:	000a      	movs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d100      	bne.n	80019c2 <HAL_DMA_IRQHandler+0x66>
 80019c0:	e06a      	b.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	0010      	movs	r0, r2
 80019ca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80019cc:	e064      	b.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	2202      	movs	r2, #2
 80019d4:	409a      	lsls	r2, r3
 80019d6:	0013      	movs	r3, r2
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	d02b      	beq.n	8001a36 <HAL_DMA_IRQHandler+0xda>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d027      	beq.n	8001a36 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2220      	movs	r2, #32
 80019ee:	4013      	ands	r3, r2
 80019f0:	d10b      	bne.n	8001a0a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	210a      	movs	r1, #10
 80019fe:	438a      	bics	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2221      	movs	r2, #33	; 0x21
 8001a06:	2101      	movs	r1, #1
 8001a08:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	2102      	movs	r1, #2
 8001a14:	4091      	lsls	r1, r2
 8001a16:	000a      	movs	r2, r1
 8001a18:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	2100      	movs	r1, #0
 8001a20:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d036      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	0010      	movs	r0, r2
 8001a32:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a34:	e030      	b.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	409a      	lsls	r2, r3
 8001a3e:	0013      	movs	r3, r2
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	d028      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	2208      	movs	r2, #8
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d024      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	210e      	movs	r1, #14
 8001a5a:	438a      	bics	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	2101      	movs	r1, #1
 8001a68:	4091      	lsls	r1, r2
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2221      	movs	r2, #33	; 0x21
 8001a78:	2101      	movs	r1, #1
 8001a7a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	0010      	movs	r0, r2
 8001a94:	4798      	blx	r3
    }
   }
}  
 8001a96:	e7ff      	b.n	8001a98 <HAL_DMA_IRQHandler+0x13c>
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b004      	add	sp, #16
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4091      	lsls	r1, r2
 8001aba:	000a      	movs	r2, r1
 8001abc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b10      	cmp	r3, #16
 8001acc:	d108      	bne.n	8001ae0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ade:	e007      	b.n	8001af0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b004      	add	sp, #16
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	001a      	movs	r2, r3
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <DMA_CalcBaseAndBitshift+0x60>)
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d810      	bhi.n	8001b2e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <DMA_CalcBaseAndBitshift+0x64>)
 8001b12:	4694      	mov	ip, r2
 8001b14:	4463      	add	r3, ip
 8001b16:	2114      	movs	r1, #20
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7fe faf3 	bl	8000104 <__udivsi3>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	009a      	lsls	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <DMA_CalcBaseAndBitshift+0x68>)
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b2c:	e00f      	b.n	8001b4e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b34:	4694      	mov	ip, r2
 8001b36:	4463      	add	r3, ip
 8001b38:	2114      	movs	r1, #20
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fae2 	bl	8000104 <__udivsi3>
 8001b40:	0003      	movs	r3, r0
 8001b42:	009a      	lsls	r2, r3, #2
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <DMA_CalcBaseAndBitshift+0x70>)
 8001b4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40020407 	.word	0x40020407
 8001b5c:	bffdfff8 	.word	0xbffdfff8
 8001b60:	40020000 	.word	0x40020000
 8001b64:	bffdfbf8 	.word	0xbffdfbf8
 8001b68:	40020400 	.word	0x40020400

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e155      	b.n	8001e28 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4091      	lsls	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <HAL_GPIO_Init+0x28>
 8001b92:	e146      	b.n	8001e22 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d005      	beq.n	8001bac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d130      	bne.n	8001c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	0013      	movs	r3, r2
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	43da      	mvns	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d017      	beq.n	8001c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d123      	bne.n	8001c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	58d3      	ldr	r3, [r2, r3]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2207      	movs	r2, #7
 8001c68:	4013      	ands	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	43da      	mvns	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2107      	movs	r1, #7
 8001c82:	400b      	ands	r3, r1
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	6939      	ldr	r1, [r7, #16]
 8001c9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	23c0      	movs	r3, #192	; 0xc0
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <HAL_GPIO_Init+0x174>
 8001cde:	e0a0      	b.n	8001e22 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce0:	4b57      	ldr	r3, [pc, #348]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	619a      	str	r2, [r3, #24]
 8001cec:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_GPIO_Init+0x2d8>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	589b      	ldr	r3, [r3, r2]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	409a      	lsls	r2, r3
 8001d12:	0013      	movs	r3, r2
 8001d14:	43da      	mvns	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	2390      	movs	r3, #144	; 0x90
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d019      	beq.n	8001d5a <HAL_GPIO_Init+0x1ee>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a47      	ldr	r2, [pc, #284]	; (8001e48 <HAL_GPIO_Init+0x2dc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0x1ea>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <HAL_GPIO_Init+0x2e0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00d      	beq.n	8001d52 <HAL_GPIO_Init+0x1e6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <HAL_GPIO_Init+0x2e4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <HAL_GPIO_Init+0x1e2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_GPIO_Init+0x1de>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	2103      	movs	r1, #3
 8001d60:	400a      	ands	r2, r1
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x2d8>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43da      	mvns	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	025b      	lsls	r3, r3, #9
 8001d92:	4013      	ands	r3, r2
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	035b      	lsls	r3, r3, #13
 8001de6:	4013      	ands	r3, r2
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	039b      	lsls	r3, r3, #14
 8001e10:	4013      	ands	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	1e13      	subs	r3, r2, #0
 8001e32:	d000      	beq.n	8001e36 <HAL_GPIO_Init+0x2ca>
 8001e34:	e6a2      	b.n	8001b7c <HAL_GPIO_Init+0x10>
  } 
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b006      	add	sp, #24
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	48000c00 	.word	0x48000c00
 8001e54:	48001000 	.word	0x48001000
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	0008      	movs	r0, r1
 8001e66:	0011      	movs	r1, r2
 8001e68:	1cbb      	adds	r3, r7, #2
 8001e6a:	1c02      	adds	r2, r0, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	1c7b      	adds	r3, r7, #1
 8001e70:	1c0a      	adds	r2, r1, #0
 8001e72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e74:	1c7b      	adds	r3, r7, #1
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7c:	1cbb      	adds	r3, r7, #2
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e86:	1cbb      	adds	r3, r7, #2
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f000 fb76 	bl	8002598 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d100      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x20>
 8001eb6:	e08e      	b.n	8001fd6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb8:	4bc5      	ldr	r3, [pc, #788]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec4:	4bc2      	ldr	r3, [pc, #776]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	220c      	movs	r2, #12
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d117      	bne.n	8001f00 <HAL_RCC_OscConfig+0x68>
 8001ed0:	4bbf      	ldr	r3, [pc, #764]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	401a      	ands	r2, r3
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	025b      	lsls	r3, r3, #9
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d10e      	bne.n	8001f00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4bbb      	ldr	r3, [pc, #748]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x58>
 8001eee:	e071      	b.n	8001fd4 <HAL_RCC_OscConfig+0x13c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d000      	beq.n	8001efa <HAL_RCC_OscConfig+0x62>
 8001ef8:	e06c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f000 fb4c 	bl	8002598 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x80>
 8001f08:	4bb1      	ldr	r3, [pc, #708]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4bb0      	ldr	r3, [pc, #704]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	0249      	lsls	r1, r1, #9
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e02f      	b.n	8001f78 <HAL_RCC_OscConfig+0xe0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0xa2>
 8001f20:	4bab      	ldr	r3, [pc, #684]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4baa      	ldr	r3, [pc, #680]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f26:	49ab      	ldr	r1, [pc, #684]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	4ba8      	ldr	r3, [pc, #672]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4ba7      	ldr	r3, [pc, #668]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f32:	49a9      	ldr	r1, [pc, #676]	; (80021d8 <HAL_RCC_OscConfig+0x340>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e01e      	b.n	8001f78 <HAL_RCC_OscConfig+0xe0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d10e      	bne.n	8001f60 <HAL_RCC_OscConfig+0xc8>
 8001f42:	4ba3      	ldr	r3, [pc, #652]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4ba2      	ldr	r3, [pc, #648]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	02c9      	lsls	r1, r1, #11
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	4b9f      	ldr	r3, [pc, #636]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b9e      	ldr	r3, [pc, #632]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0249      	lsls	r1, r1, #9
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0xe0>
 8001f60:	4b9b      	ldr	r3, [pc, #620]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b9a      	ldr	r3, [pc, #616]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f66:	499b      	ldr	r1, [pc, #620]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4b98      	ldr	r3, [pc, #608]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b97      	ldr	r3, [pc, #604]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f72:	4999      	ldr	r1, [pc, #612]	; (80021d8 <HAL_RCC_OscConfig+0x340>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d014      	beq.n	8001faa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe febe 	bl	8000d00 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8a:	f7fe feb9 	bl	8000d00 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b64      	cmp	r3, #100	; 0x64
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e2fd      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9c:	4b8c      	ldr	r3, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0xf2>
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7fe fea9 	bl	8000d00 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7fe fea4 	bl	8000d00 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e2e8      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b82      	ldr	r3, [pc, #520]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x11c>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x14a>
 8001fe0:	e06c      	b.n	80020bc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d00e      	beq.n	800200a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fec:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	220c      	movs	r2, #12
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d11f      	bne.n	8002038 <HAL_RCC_OscConfig+0x1a0>
 8001ff8:	4b75      	ldr	r3, [pc, #468]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	23c0      	movs	r3, #192	; 0xc0
 8001ffe:	025b      	lsls	r3, r3, #9
 8002000:	401a      	ands	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	429a      	cmp	r2, r3
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b71      	ldr	r3, [pc, #452]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x188>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e2bb      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	22f8      	movs	r2, #248	; 0xf8
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00da      	lsls	r2, r3, #3
 8002030:	4b67      	ldr	r3, [pc, #412]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e041      	b.n	80020bc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d024      	beq.n	800208a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fe58 	bl	8000d00 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002056:	f7fe fe53 	bl	8000d00 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e297      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d0f1      	beq.n	8002056 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22f8      	movs	r2, #248	; 0xf8
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	00da      	lsls	r2, r3, #3
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e018      	b.n	80020bc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002090:	2101      	movs	r1, #1
 8002092:	438a      	bics	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7fe fe33 	bl	8000d00 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a0:	f7fe fe2e 	bl	8000d00 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e272      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2202      	movs	r2, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1f1      	bne.n	80020a0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2208      	movs	r2, #8
 80020c2:	4013      	ands	r3, r2
 80020c4:	d036      	beq.n	8002134 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7fe fe11 	bl	8000d00 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe fe0c 	bl	8000d00 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e250      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0f1      	beq.n	80020e4 <HAL_RCC_OscConfig+0x24c>
 8002100:	e018      	b.n	8002134 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002108:	2101      	movs	r1, #1
 800210a:	438a      	bics	r2, r1
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7fe fdf7 	bl	8000d00 <HAL_GetTick>
 8002112:	0003      	movs	r3, r0
 8002114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7fe fdf2 	bl	8000d00 <HAL_GetTick>
 800211c:	0002      	movs	r2, r0
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e236      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d1f1      	bne.n	8002118 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2204      	movs	r2, #4
 800213a:	4013      	ands	r3, r2
 800213c:	d100      	bne.n	8002140 <HAL_RCC_OscConfig+0x2a8>
 800213e:	e0b5      	b.n	80022ac <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002140:	201f      	movs	r0, #31
 8002142:	183b      	adds	r3, r7, r0
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	4013      	ands	r3, r2
 8002152:	d110      	bne.n	8002176 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	0549      	lsls	r1, r1, #21
 800215e:	430a      	orrs	r2, r1
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	055b      	lsls	r3, r3, #21
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002170:	183b      	adds	r3, r7, r0
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4013      	ands	r3, r2
 8002180:	d11a      	bne.n	80021b8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	0049      	lsls	r1, r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7fe fdb6 	bl	8000d00 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe fdb1 	bl	8000d00 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1f5      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10f      	bne.n	80021e0 <HAL_RCC_OscConfig+0x348>
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	621a      	str	r2, [r3, #32]
 80021cc:	e036      	b.n	800223c <HAL_RCC_OscConfig+0x3a4>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	fffeffff 	.word	0xfffeffff
 80021d8:	fffbffff 	.word	0xfffbffff
 80021dc:	40007000 	.word	0x40007000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x36a>
 80021e8:	4bca      	ldr	r3, [pc, #808]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	4bc9      	ldr	r3, [pc, #804]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	438a      	bics	r2, r1
 80021f2:	621a      	str	r2, [r3, #32]
 80021f4:	4bc7      	ldr	r3, [pc, #796]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	4bc6      	ldr	r3, [pc, #792]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	2104      	movs	r1, #4
 80021fc:	438a      	bics	r2, r1
 80021fe:	621a      	str	r2, [r3, #32]
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x3a4>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x38c>
 800220a:	4bc2      	ldr	r3, [pc, #776]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	4bc1      	ldr	r3, [pc, #772]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002210:	2104      	movs	r1, #4
 8002212:	430a      	orrs	r2, r1
 8002214:	621a      	str	r2, [r3, #32]
 8002216:	4bbf      	ldr	r3, [pc, #764]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	4bbe      	ldr	r3, [pc, #760]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	621a      	str	r2, [r3, #32]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0x3a4>
 8002224:	4bbb      	ldr	r3, [pc, #748]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	4bba      	ldr	r3, [pc, #744]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	621a      	str	r2, [r3, #32]
 8002230:	4bb8      	ldr	r3, [pc, #736]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	4bb7      	ldr	r3, [pc, #732]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002236:	2104      	movs	r1, #4
 8002238:	438a      	bics	r2, r1
 800223a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d014      	beq.n	800226e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7fe fd5c 	bl	8000d00 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	e009      	b.n	8002262 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7fe fd57 	bl	8000d00 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4aaf      	ldr	r2, [pc, #700]	; (8002518 <HAL_RCC_OscConfig+0x680>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e19a      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	4bac      	ldr	r3, [pc, #688]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x3b6>
 800226c:	e013      	b.n	8002296 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7fe fd47 	bl	8000d00 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7fe fd42 	bl	8000d00 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	4aa5      	ldr	r2, [pc, #660]	; (8002518 <HAL_RCC_OscConfig+0x680>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e185      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	4ba1      	ldr	r3, [pc, #644]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	4b9b      	ldr	r3, [pc, #620]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022a6:	499d      	ldr	r1, [pc, #628]	; (800251c <HAL_RCC_OscConfig+0x684>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d12a      	bne.n	8002314 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022be:	4b95      	ldr	r3, [pc, #596]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c2:	4b94      	ldr	r3, [pc, #592]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022c4:	2104      	movs	r1, #4
 80022c6:	430a      	orrs	r2, r1
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022ca:	4b92      	ldr	r3, [pc, #584]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	430a      	orrs	r2, r1
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7fe fd13 	bl	8000d00 <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022e0:	f7fe fd0e 	bl	8000d00 <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e152      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f1      	beq.n	80022e0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022fc:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	22f8      	movs	r2, #248	; 0xf8
 8002302:	4393      	bics	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	00da      	lsls	r2, r3, #3
 800230c:	4b81      	ldr	r3, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800230e:	430a      	orrs	r2, r1
 8002310:	635a      	str	r2, [r3, #52]	; 0x34
 8002312:	e034      	b.n	800237e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	3305      	adds	r3, #5
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800231c:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800231e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002320:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002322:	2104      	movs	r1, #4
 8002324:	438a      	bics	r2, r1
 8002326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002328:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	22f8      	movs	r2, #248	; 0xf8
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	00da      	lsls	r2, r3, #3
 8002338:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
 800233e:	e01e      	b.n	800237e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002340:	4b74      	ldr	r3, [pc, #464]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002344:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002346:	2104      	movs	r1, #4
 8002348:	430a      	orrs	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800234c:	4b71      	ldr	r3, [pc, #452]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800234e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002350:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7fe fcd2 	bl	8000d00 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002362:	f7fe fccd 	bl	8000d00 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e111      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002374:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d1f1      	bne.n	8002362 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2220      	movs	r2, #32
 8002384:	4013      	ands	r3, r2
 8002386:	d05c      	beq.n	8002442 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	220c      	movs	r2, #12
 800238e:	4013      	ands	r3, r2
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d00e      	beq.n	80023b2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002394:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	220c      	movs	r2, #12
 800239a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800239c:	2b08      	cmp	r3, #8
 800239e:	d114      	bne.n	80023ca <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	23c0      	movs	r3, #192	; 0xc0
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	401a      	ands	r2, r3
 80023aa:	23c0      	movs	r3, #192	; 0xc0
 80023ac:	025b      	lsls	r3, r3, #9
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023b2:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	025b      	lsls	r3, r3, #9
 80023ba:	4013      	ands	r3, r2
 80023bc:	d040      	beq.n	8002440 <HAL_RCC_OscConfig+0x5a8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d03c      	beq.n	8002440 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e6      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01b      	beq.n	800240a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d6:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	430a      	orrs	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7fe fc8e 	bl	8000d00 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ea:	f7fe fc89 	bl	8000d00 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0cd      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023fc:	4b45      	ldr	r3, [pc, #276]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	4013      	ands	r3, r2
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x552>
 8002408:	e01b      	b.n	8002442 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800240c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002410:	4943      	ldr	r1, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x688>)
 8002412:	400a      	ands	r2, r1
 8002414:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fc73 	bl	8000d00 <HAL_GetTick>
 800241a:	0003      	movs	r3, r0
 800241c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002420:	f7fe fc6e 	bl	8000d00 <HAL_GetTick>
 8002424:	0002      	movs	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0b2      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	025b      	lsls	r3, r3, #9
 800243a:	4013      	ands	r3, r2
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x588>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002440:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d100      	bne.n	800244c <HAL_RCC_OscConfig+0x5b4>
 800244a:	e0a4      	b.n	8002596 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	220c      	movs	r2, #12
 8002452:	4013      	ands	r3, r2
 8002454:	2b08      	cmp	r3, #8
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x5c2>
 8002458:	e078      	b.n	800254c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b02      	cmp	r3, #2
 8002460:	d14c      	bne.n	80024fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002468:	492e      	ldr	r1, [pc, #184]	; (8002524 <HAL_RCC_OscConfig+0x68c>)
 800246a:	400a      	ands	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fc47 	bl	8000d00 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fc42 	bl	8000d00 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e086      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	049b      	lsls	r3, r3, #18
 8002492:	4013      	ands	r3, r2
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	220f      	movs	r2, #15
 800249c:	4393      	bics	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_RCC_OscConfig+0x690>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	431a      	orrs	r2, r3
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	0449      	lsls	r1, r1, #17
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fc15 	bl	8000d00 <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fc10 	bl	8000d00 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e054      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	4013      	ands	r3, r2
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x644>
 80024fa:	e04c      	b.n	8002596 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002502:	4908      	ldr	r1, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x68c>)
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fbfa 	bl	8000d00 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x6a6>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	40021000 	.word	0x40021000
 8002518:	00001388 	.word	0x00001388
 800251c:	efffffff 	.word	0xefffffff
 8002520:	fffeffff 	.word	0xfffeffff
 8002524:	feffffff 	.word	0xfeffffff
 8002528:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fbe8 	bl	8000d00 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e02c      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_OscConfig+0x708>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	049b      	lsls	r3, r3, #18
 8002546:	4013      	ands	r3, r2
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x694>
 800254a:	e024      	b.n	8002596 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e01f      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_OscConfig+0x708>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_OscConfig+0x708>)
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	23c0      	movs	r3, #192	; 0xc0
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	429a      	cmp	r2, r3
 8002572:	d10e      	bne.n	8002592 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	220f      	movs	r2, #15
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	23f0      	movs	r3, #240	; 0xf0
 8002586:	039b      	lsls	r3, r3, #14
 8002588:	401a      	ands	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b008      	add	sp, #32
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0bf      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d911      	bls.n	80025ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4393      	bics	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0a6      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2204      	movs	r2, #4
 80025fa:	4013      	ands	r3, r2
 80025fc:	d006      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025fe:	4b51      	ldr	r3, [pc, #324]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002604:	21e0      	movs	r1, #224	; 0xe0
 8002606:	00c9      	lsls	r1, r1, #3
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	22f0      	movs	r2, #240	; 0xf0
 8002612:	4393      	bics	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800261c:	430a      	orrs	r2, r1
 800261e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	d04c      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b44      	ldr	r3, [pc, #272]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	4013      	ands	r3, r2
 800263c:	d120      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07a      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	049b      	lsls	r3, r3, #18
 8002652:	4013      	ands	r3, r2
 8002654:	d114      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06e      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	025b      	lsls	r3, r3, #9
 800266a:	4013      	ands	r3, r2
 800266c:	d108      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e062      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2202      	movs	r2, #2
 8002678:	4013      	ands	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e05b      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2203      	movs	r2, #3
 8002686:	4393      	bics	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fe fb34 	bl	8000d00 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269c:	e009      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269e:	f7fe fb2f 	bl	8000d00 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_RCC_ClockConfig+0x1a4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e042      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	220c      	movs	r2, #12
 80026b8:	401a      	ands	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1ec      	bne.n	800269e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d211      	bcs.n	80026f6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4393      	bics	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e020      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2204      	movs	r2, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	d009      	beq.n	8002714 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_RCC_ClockConfig+0x1a8>)
 8002706:	4013      	ands	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002714:	f000 f820 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002718:	0001      	movs	r1, r0
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	220f      	movs	r2, #15
 8002722:	4013      	ands	r3, r2
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x1ac>)
 8002726:	5cd3      	ldrb	r3, [r2, r3]
 8002728:	000a      	movs	r2, r1
 800272a:	40da      	lsrs	r2, r3
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1b0>)
 800272e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002730:	2000      	movs	r0, #0
 8002732:	f7fe fa9f 	bl	8000c74 <HAL_InitTick>
  
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b004      	add	sp, #16
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	00001388 	.word	0x00001388
 800274c:	fffff8ff 	.word	0xfffff8ff
 8002750:	08003654 	.word	0x08003654
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b08f      	sub	sp, #60	; 0x3c
 800275c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800275e:	2314      	movs	r3, #20
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_RCC_GetSysClockFreq+0xec>)
 8002764:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002766:	c313      	stmia	r3!, {r0, r1, r4}
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	4a36      	ldr	r2, [pc, #216]	; (8002848 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002770:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002772:	c313      	stmia	r3!, {r0, r1, r4}
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_GetSysClockFreq+0xf4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	220c      	movs	r2, #12
 8002796:	4013      	ands	r3, r2
 8002798:	2b0c      	cmp	r3, #12
 800279a:	d047      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0xd4>
 800279c:	d849      	bhi.n	8002832 <HAL_RCC_GetSysClockFreq+0xda>
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x50>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x56>
 80027a6:	e044      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ac:	e044      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	220f      	movs	r2, #15
 80027b4:	4013      	ands	r3, r2
 80027b6:	2214      	movs	r2, #20
 80027b8:	18ba      	adds	r2, r7, r2
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_RCC_GetSysClockFreq+0xf4>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	220f      	movs	r2, #15
 80027c4:	4013      	ands	r3, r2
 80027c6:	1d3a      	adds	r2, r7, #4
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ce:	23c0      	movs	r3, #192	; 0xc0
 80027d0:	025b      	lsls	r3, r3, #9
 80027d2:	401a      	ands	r2, r3
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	025b      	lsls	r3, r3, #9
 80027d8:	429a      	cmp	r2, r3
 80027da:	d109      	bne.n	80027f0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027de:	481c      	ldr	r0, [pc, #112]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e0:	f7fd fc90 	bl	8000104 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	001a      	movs	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	4353      	muls	r3, r2
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	e01a      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	401a      	ands	r2, r3
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d109      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002802:	4814      	ldr	r0, [pc, #80]	; (8002854 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002804:	f7fd fc7e 	bl	8000104 <__udivsi3>
 8002808:	0003      	movs	r3, r0
 800280a:	001a      	movs	r2, r3
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	4353      	muls	r3, r2
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
 8002812:	e008      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002816:	480e      	ldr	r0, [pc, #56]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002818:	f7fd fc74 	bl	8000104 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	001a      	movs	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	4353      	muls	r3, r2
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800282a:	e005      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_GetSysClockFreq+0xfc>)
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002830:	e002      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002836:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b00f      	add	sp, #60	; 0x3c
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	08003634 	.word	0x08003634
 8002848:	08003644 	.word	0x08003644
 800284c:	40021000 	.word	0x40021000
 8002850:	007a1200 	.word	0x007a1200
 8002854:	02dc6c00 	.word	0x02dc6c00

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_RCC_GetHCLKFreq+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002870:	f7ff fff2 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002874:	0001      	movs	r1, r0
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	2207      	movs	r2, #7
 800287e:	4013      	ands	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	40d9      	lsrs	r1, r3
 8002886:	000b      	movs	r3, r1
}    
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40021000 	.word	0x40021000
 8002894:	08003664 	.word	0x08003664

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	025b      	lsls	r3, r3, #9
 80028b0:	4013      	ands	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80028b4:	e08e      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2017      	movs	r0, #23
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b6e      	ldr	r3, [pc, #440]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	055b      	lsls	r3, r3, #21
 80028c6:	4013      	ands	r3, r2
 80028c8:	d110      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b6b      	ldr	r3, [pc, #428]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0549      	lsls	r1, r1, #21
 80028d4:	430a      	orrs	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	055b      	lsls	r3, r3, #21
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d11a      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0049      	lsls	r1, r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7fe f9fb 	bl	8000d00 <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	e008      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7fe f9f6 	bl	8000d00 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0a6      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4013      	ands	r3, r2
 800292c:	d0f0      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292e:	4b52      	ldr	r3, [pc, #328]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002930:	6a1a      	ldr	r2, [r3, #32]
 8002932:	23c0      	movs	r3, #192	; 0xc0
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d034      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	23c0      	movs	r3, #192	; 0xc0
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4013      	ands	r3, r2
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d02c      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002950:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002956:	4013      	ands	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0249      	lsls	r1, r1, #9
 8002964:	430a      	orrs	r2, r1
 8002966:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002968:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296e:	4945      	ldr	r1, [pc, #276]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002970:	400a      	ands	r2, r1
 8002972:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002974:	4b40      	ldr	r3, [pc, #256]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	4013      	ands	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe f9bd 	bl	8000d00 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	e009      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe f9b8 	bl	8000d00 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e067      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d0f0      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029aa:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029be:	2317      	movs	r3, #23
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ce:	492f      	ldr	r1, [pc, #188]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	2203      	movs	r2, #3
 80029e4:	4393      	bics	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	02db      	lsls	r3, r3, #11
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2220      	movs	r2, #32
 8002a36:	4013      	ands	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	2210      	movs	r2, #16
 8002a40:	4393      	bics	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	4393      	bics	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b006      	add	sp, #24
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	fffffcff 	.word	0xfffffcff
 8002a84:	fffeffff 	.word	0xfffeffff
 8002a88:	00001388 	.word	0x00001388
 8002a8c:	efffffff 	.word	0xefffffff
 8002a90:	fffcffff 	.word	0xfffcffff
 8002a94:	fff3ffff 	.word	0xfff3ffff

08002a98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e044      	b.n	8002b34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2274      	movs	r2, #116	; 0x74
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7fe f825 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2224      	movs	r2, #36	; 0x24
 8002ac6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f9ca 	bl	8002e74 <UART_SetConfig>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e024      	b.n	8002b34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 fba5 	bl	8003244 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	490d      	ldr	r1, [pc, #52]	; (8002b3c <HAL_UART_Init+0xa4>)
 8002b06:	400a      	ands	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	212a      	movs	r1, #42	; 0x2a
 8002b16:	438a      	bics	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2101      	movs	r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 fc3d 	bl	80033ac <UART_CheckIdleState>
 8002b32:	0003      	movs	r3, r0
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b002      	add	sp, #8
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	ffffb7ff 	.word	0xffffb7ff

08002b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	1dbb      	adds	r3, r7, #6
 8002b4e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d000      	beq.n	8002b5a <HAL_UART_Transmit+0x1a>
 8002b58:	e096      	b.n	8002c88 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_UART_Transmit+0x28>
 8002b60:	1dbb      	adds	r3, r7, #6
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e08e      	b.n	8002c8a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	015b      	lsls	r3, r3, #5
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d109      	bne.n	8002b8c <HAL_UART_Transmit+0x4c>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e07e      	b.n	8002c8a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2274      	movs	r2, #116	; 0x74
 8002b90:	5c9b      	ldrb	r3, [r3, r2]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Transmit+0x5a>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e077      	b.n	8002c8a <HAL_UART_Transmit+0x14a>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2274      	movs	r2, #116	; 0x74
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2221      	movs	r2, #33	; 0x21
 8002bae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe f8a6 	bl	8000d00 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1dba      	adds	r2, r7, #6
 8002bbc:	2150      	movs	r1, #80	; 0x50
 8002bbe:	8812      	ldrh	r2, [r2, #0]
 8002bc0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1dba      	adds	r2, r7, #6
 8002bc6:	2152      	movs	r1, #82	; 0x52
 8002bc8:	8812      	ldrh	r2, [r2, #0]
 8002bca:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	015b      	lsls	r3, r3, #5
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d108      	bne.n	8002bea <HAL_UART_Transmit+0xaa>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e003      	b.n	8002bf2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2274      	movs	r2, #116	; 0x74
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002bfa:	e02d      	b.n	8002c58 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	0013      	movs	r3, r2
 8002c06:	2200      	movs	r2, #0
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	f000 fc17 	bl	800343c <UART_WaitOnFlagUntilTimeout>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e039      	b.n	8002c8a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10b      	bne.n	8002c34 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	881a      	ldrh	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	05d2      	lsls	r2, r2, #23
 8002c26:	0dd2      	lsrs	r2, r2, #23
 8002c28:	b292      	uxth	r2, r2
 8002c2a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	3302      	adds	r3, #2
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	e008      	b.n	8002c46 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	781a      	ldrb	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b292      	uxth	r2, r2
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	3301      	adds	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2252      	movs	r2, #82	; 0x52
 8002c4a:	5a9b      	ldrh	r3, [r3, r2]
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b299      	uxth	r1, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2252      	movs	r2, #82	; 0x52
 8002c56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2252      	movs	r2, #82	; 0x52
 8002c5c:	5a9b      	ldrh	r3, [r3, r2]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1cb      	bne.n	8002bfc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2140      	movs	r1, #64	; 0x40
 8002c72:	f000 fbe3 	bl	800343c <UART_WaitOnFlagUntilTimeout>
 8002c76:	1e03      	subs	r3, r0, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e005      	b.n	8002c8a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e000      	b.n	8002c8a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002c88:	2302      	movs	r3, #2
  }
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b008      	add	sp, #32
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	1dbb      	adds	r3, r7, #6
 8002ca2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d000      	beq.n	8002cae <HAL_UART_Receive+0x1a>
 8002cac:	e0da      	b.n	8002e64 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_UART_Receive+0x28>
 8002cb4:	1dbb      	adds	r3, r7, #6
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0d2      	b.n	8002e66 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	015b      	lsls	r3, r3, #5
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d109      	bne.n	8002ce0 <HAL_UART_Receive+0x4c>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d105      	bne.n	8002ce0 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0c2      	b.n	8002e66 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2274      	movs	r2, #116	; 0x74
 8002ce4:	5c9b      	ldrb	r3, [r3, r2]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Receive+0x5a>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0bb      	b.n	8002e66 <HAL_UART_Receive+0x1d2>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2274      	movs	r2, #116	; 0x74
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2222      	movs	r2, #34	; 0x22
 8002d02:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0a:	f7fd fff9 	bl	8000d00 <HAL_GetTick>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1dba      	adds	r2, r7, #6
 8002d16:	2158      	movs	r1, #88	; 0x58
 8002d18:	8812      	ldrh	r2, [r2, #0]
 8002d1a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1dba      	adds	r2, r7, #6
 8002d20:	215a      	movs	r1, #90	; 0x5a
 8002d22:	8812      	ldrh	r2, [r2, #0]
 8002d24:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	015b      	lsls	r3, r3, #5
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10d      	bne.n	8002d4e <HAL_UART_Receive+0xba>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <HAL_UART_Receive+0xb0>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	225c      	movs	r2, #92	; 0x5c
 8002d3e:	494c      	ldr	r1, [pc, #304]	; (8002e70 <HAL_UART_Receive+0x1dc>)
 8002d40:	5299      	strh	r1, [r3, r2]
 8002d42:	e02e      	b.n	8002da2 <HAL_UART_Receive+0x10e>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	225c      	movs	r2, #92	; 0x5c
 8002d48:	21ff      	movs	r1, #255	; 0xff
 8002d4a:	5299      	strh	r1, [r3, r2]
 8002d4c:	e029      	b.n	8002da2 <HAL_UART_Receive+0x10e>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10d      	bne.n	8002d72 <HAL_UART_Receive+0xde>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d104      	bne.n	8002d68 <HAL_UART_Receive+0xd4>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	225c      	movs	r2, #92	; 0x5c
 8002d62:	21ff      	movs	r1, #255	; 0xff
 8002d64:	5299      	strh	r1, [r3, r2]
 8002d66:	e01c      	b.n	8002da2 <HAL_UART_Receive+0x10e>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	225c      	movs	r2, #92	; 0x5c
 8002d6c:	217f      	movs	r1, #127	; 0x7f
 8002d6e:	5299      	strh	r1, [r3, r2]
 8002d70:	e017      	b.n	8002da2 <HAL_UART_Receive+0x10e>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689a      	ldr	r2, [r3, #8]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	055b      	lsls	r3, r3, #21
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d10d      	bne.n	8002d9a <HAL_UART_Receive+0x106>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <HAL_UART_Receive+0xfc>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	225c      	movs	r2, #92	; 0x5c
 8002d8a:	217f      	movs	r1, #127	; 0x7f
 8002d8c:	5299      	strh	r1, [r3, r2]
 8002d8e:	e008      	b.n	8002da2 <HAL_UART_Receive+0x10e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	225c      	movs	r2, #92	; 0x5c
 8002d94:	213f      	movs	r1, #63	; 0x3f
 8002d96:	5299      	strh	r1, [r3, r2]
 8002d98:	e003      	b.n	8002da2 <HAL_UART_Receive+0x10e>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	225c      	movs	r2, #92	; 0x5c
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002da2:	2312      	movs	r3, #18
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	215c      	movs	r1, #92	; 0x5c
 8002daa:	5a52      	ldrh	r2, [r2, r1]
 8002dac:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689a      	ldr	r2, [r3, #8]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d108      	bne.n	8002dcc <HAL_UART_Receive+0x138>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d104      	bne.n	8002dcc <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	e003      	b.n	8002dd4 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2274      	movs	r2, #116	; 0x74
 8002dd8:	2100      	movs	r1, #0
 8002dda:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002ddc:	e037      	b.n	8002e4e <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	0013      	movs	r3, r2
 8002de8:	2200      	movs	r2, #0
 8002dea:	2120      	movs	r1, #32
 8002dec:	f000 fb26 	bl	800343c <UART_WaitOnFlagUntilTimeout>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e036      	b.n	8002e66 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10e      	bne.n	8002e1c <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2212      	movs	r2, #18
 8002e08:	18ba      	adds	r2, r7, r2
 8002e0a:	8812      	ldrh	r2, [r2, #0]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	3302      	adds	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e00f      	b.n	8002e3c <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2212      	movs	r2, #18
 8002e28:	18ba      	adds	r2, r7, r2
 8002e2a:	8812      	ldrh	r2, [r2, #0]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	225a      	movs	r2, #90	; 0x5a
 8002e40:	5a9b      	ldrh	r3, [r3, r2]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b299      	uxth	r1, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	225a      	movs	r2, #90	; 0x5a
 8002e4c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	225a      	movs	r2, #90	; 0x5a
 8002e52:	5a9b      	ldrh	r3, [r3, r2]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1c1      	bne.n	8002dde <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2220      	movs	r2, #32
 8002e5e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	e000      	b.n	8002e66 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
  }
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b008      	add	sp, #32
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	000001ff 	.word	0x000001ff

08002e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e7c:	231e      	movs	r3, #30
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4abe      	ldr	r2, [pc, #760]	; (800319c <UART_SetConfig+0x328>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4ab9      	ldr	r2, [pc, #740]	; (80031a0 <UART_SetConfig+0x32c>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4ab0      	ldr	r2, [pc, #704]	; (80031a4 <UART_SetConfig+0x330>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4aac      	ldr	r2, [pc, #688]	; (80031a8 <UART_SetConfig+0x334>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d127      	bne.n	8002f4a <UART_SetConfig+0xd6>
 8002efa:	4bac      	ldr	r3, [pc, #688]	; (80031ac <UART_SetConfig+0x338>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	2203      	movs	r2, #3
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d00d      	beq.n	8002f22 <UART_SetConfig+0xae>
 8002f06:	d81b      	bhi.n	8002f40 <UART_SetConfig+0xcc>
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d014      	beq.n	8002f36 <UART_SetConfig+0xc2>
 8002f0c:	d818      	bhi.n	8002f40 <UART_SetConfig+0xcc>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <UART_SetConfig+0xa4>
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d00a      	beq.n	8002f2c <UART_SetConfig+0xb8>
 8002f16:	e013      	b.n	8002f40 <UART_SetConfig+0xcc>
 8002f18:	231f      	movs	r3, #31
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e0bd      	b.n	800309e <UART_SetConfig+0x22a>
 8002f22:	231f      	movs	r3, #31
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	2202      	movs	r2, #2
 8002f28:	701a      	strb	r2, [r3, #0]
 8002f2a:	e0b8      	b.n	800309e <UART_SetConfig+0x22a>
 8002f2c:	231f      	movs	r3, #31
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2204      	movs	r2, #4
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	e0b3      	b.n	800309e <UART_SetConfig+0x22a>
 8002f36:	231f      	movs	r3, #31
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	2208      	movs	r2, #8
 8002f3c:	701a      	strb	r2, [r3, #0]
 8002f3e:	e0ae      	b.n	800309e <UART_SetConfig+0x22a>
 8002f40:	231f      	movs	r3, #31
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	2210      	movs	r2, #16
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e0a9      	b.n	800309e <UART_SetConfig+0x22a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a98      	ldr	r2, [pc, #608]	; (80031b0 <UART_SetConfig+0x33c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d134      	bne.n	8002fbe <UART_SetConfig+0x14a>
 8002f54:	4b95      	ldr	r3, [pc, #596]	; (80031ac <UART_SetConfig+0x338>)
 8002f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f58:	23c0      	movs	r3, #192	; 0xc0
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	22c0      	movs	r2, #192	; 0xc0
 8002f60:	0292      	lsls	r2, r2, #10
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d017      	beq.n	8002f96 <UART_SetConfig+0x122>
 8002f66:	22c0      	movs	r2, #192	; 0xc0
 8002f68:	0292      	lsls	r2, r2, #10
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d822      	bhi.n	8002fb4 <UART_SetConfig+0x140>
 8002f6e:	2280      	movs	r2, #128	; 0x80
 8002f70:	0292      	lsls	r2, r2, #10
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d019      	beq.n	8002faa <UART_SetConfig+0x136>
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	0292      	lsls	r2, r2, #10
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d81a      	bhi.n	8002fb4 <UART_SetConfig+0x140>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <UART_SetConfig+0x118>
 8002f82:	2280      	movs	r2, #128	; 0x80
 8002f84:	0252      	lsls	r2, r2, #9
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00a      	beq.n	8002fa0 <UART_SetConfig+0x12c>
 8002f8a:	e013      	b.n	8002fb4 <UART_SetConfig+0x140>
 8002f8c:	231f      	movs	r3, #31
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e083      	b.n	800309e <UART_SetConfig+0x22a>
 8002f96:	231f      	movs	r3, #31
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e07e      	b.n	800309e <UART_SetConfig+0x22a>
 8002fa0:	231f      	movs	r3, #31
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e079      	b.n	800309e <UART_SetConfig+0x22a>
 8002faa:	231f      	movs	r3, #31
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	2208      	movs	r2, #8
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	e074      	b.n	800309e <UART_SetConfig+0x22a>
 8002fb4:	231f      	movs	r3, #31
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2210      	movs	r2, #16
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e06f      	b.n	800309e <UART_SetConfig+0x22a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7c      	ldr	r2, [pc, #496]	; (80031b4 <UART_SetConfig+0x340>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d134      	bne.n	8003032 <UART_SetConfig+0x1be>
 8002fc8:	4b78      	ldr	r3, [pc, #480]	; (80031ac <UART_SetConfig+0x338>)
 8002fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fcc:	23c0      	movs	r3, #192	; 0xc0
 8002fce:	031b      	lsls	r3, r3, #12
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	22c0      	movs	r2, #192	; 0xc0
 8002fd4:	0312      	lsls	r2, r2, #12
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d017      	beq.n	800300a <UART_SetConfig+0x196>
 8002fda:	22c0      	movs	r2, #192	; 0xc0
 8002fdc:	0312      	lsls	r2, r2, #12
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d822      	bhi.n	8003028 <UART_SetConfig+0x1b4>
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	0312      	lsls	r2, r2, #12
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d019      	beq.n	800301e <UART_SetConfig+0x1aa>
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0312      	lsls	r2, r2, #12
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d81a      	bhi.n	8003028 <UART_SetConfig+0x1b4>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <UART_SetConfig+0x18c>
 8002ff6:	2280      	movs	r2, #128	; 0x80
 8002ff8:	02d2      	lsls	r2, r2, #11
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d00a      	beq.n	8003014 <UART_SetConfig+0x1a0>
 8002ffe:	e013      	b.n	8003028 <UART_SetConfig+0x1b4>
 8003000:	231f      	movs	r3, #31
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
 8003008:	e049      	b.n	800309e <UART_SetConfig+0x22a>
 800300a:	231f      	movs	r3, #31
 800300c:	18fb      	adds	r3, r7, r3
 800300e:	2202      	movs	r2, #2
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e044      	b.n	800309e <UART_SetConfig+0x22a>
 8003014:	231f      	movs	r3, #31
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	2204      	movs	r2, #4
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e03f      	b.n	800309e <UART_SetConfig+0x22a>
 800301e:	231f      	movs	r3, #31
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2208      	movs	r2, #8
 8003024:	701a      	strb	r2, [r3, #0]
 8003026:	e03a      	b.n	800309e <UART_SetConfig+0x22a>
 8003028:	231f      	movs	r3, #31
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2210      	movs	r2, #16
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	e035      	b.n	800309e <UART_SetConfig+0x22a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a60      	ldr	r2, [pc, #384]	; (80031b8 <UART_SetConfig+0x344>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d104      	bne.n	8003046 <UART_SetConfig+0x1d2>
 800303c:	231f      	movs	r3, #31
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
 8003044:	e02b      	b.n	800309e <UART_SetConfig+0x22a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a5c      	ldr	r2, [pc, #368]	; (80031bc <UART_SetConfig+0x348>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d104      	bne.n	800305a <UART_SetConfig+0x1e6>
 8003050:	231f      	movs	r3, #31
 8003052:	18fb      	adds	r3, r7, r3
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e021      	b.n	800309e <UART_SetConfig+0x22a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <UART_SetConfig+0x34c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d104      	bne.n	800306e <UART_SetConfig+0x1fa>
 8003064:	231f      	movs	r3, #31
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
 800306c:	e017      	b.n	800309e <UART_SetConfig+0x22a>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a54      	ldr	r2, [pc, #336]	; (80031c4 <UART_SetConfig+0x350>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d104      	bne.n	8003082 <UART_SetConfig+0x20e>
 8003078:	231f      	movs	r3, #31
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
 8003080:	e00d      	b.n	800309e <UART_SetConfig+0x22a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a50      	ldr	r2, [pc, #320]	; (80031c8 <UART_SetConfig+0x354>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d104      	bne.n	8003096 <UART_SetConfig+0x222>
 800308c:	231f      	movs	r3, #31
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
 8003094:	e003      	b.n	800309e <UART_SetConfig+0x22a>
 8003096:	231f      	movs	r3, #31
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	2210      	movs	r2, #16
 800309c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d15d      	bne.n	8003166 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80030aa:	231f      	movs	r3, #31
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d015      	beq.n	80030e0 <UART_SetConfig+0x26c>
 80030b4:	dc18      	bgt.n	80030e8 <UART_SetConfig+0x274>
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d00d      	beq.n	80030d6 <UART_SetConfig+0x262>
 80030ba:	dc15      	bgt.n	80030e8 <UART_SetConfig+0x274>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <UART_SetConfig+0x252>
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d005      	beq.n	80030d0 <UART_SetConfig+0x25c>
 80030c4:	e010      	b.n	80030e8 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c6:	f7ff fbd1 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 80030ca:	0003      	movs	r3, r0
 80030cc:	61bb      	str	r3, [r7, #24]
        break;
 80030ce:	e012      	b.n	80030f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d0:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <UART_SetConfig+0x358>)
 80030d2:	61bb      	str	r3, [r7, #24]
        break;
 80030d4:	e00f      	b.n	80030f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030d6:	f7ff fb3f 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 80030da:	0003      	movs	r3, r0
 80030dc:	61bb      	str	r3, [r7, #24]
        break;
 80030de:	e00a      	b.n	80030f6 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e0:	2380      	movs	r3, #128	; 0x80
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	61bb      	str	r3, [r7, #24]
        break;
 80030e6:	e006      	b.n	80030f6 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030ec:	231e      	movs	r3, #30
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	2201      	movs	r2, #1
 80030f2:	701a      	strb	r2, [r3, #0]
        break;
 80030f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d100      	bne.n	80030fe <UART_SetConfig+0x28a>
 80030fc:	e095      	b.n	800322a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	005a      	lsls	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	18d2      	adds	r2, r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	0019      	movs	r1, r3
 8003110:	0010      	movs	r0, r2
 8003112:	f7fc fff7 	bl	8000104 <__udivsi3>
 8003116:	0003      	movs	r3, r0
 8003118:	b29b      	uxth	r3, r3
 800311a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	2b0f      	cmp	r3, #15
 8003120:	d91c      	bls.n	800315c <UART_SetConfig+0x2e8>
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	025b      	lsls	r3, r3, #9
 8003128:	429a      	cmp	r2, r3
 800312a:	d217      	bcs.n	800315c <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	b29a      	uxth	r2, r3
 8003130:	200e      	movs	r0, #14
 8003132:	183b      	adds	r3, r7, r0
 8003134:	210f      	movs	r1, #15
 8003136:	438a      	bics	r2, r1
 8003138:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	085b      	lsrs	r3, r3, #1
 800313e:	b29b      	uxth	r3, r3
 8003140:	2207      	movs	r2, #7
 8003142:	4013      	ands	r3, r2
 8003144:	b299      	uxth	r1, r3
 8003146:	183b      	adds	r3, r7, r0
 8003148:	183a      	adds	r2, r7, r0
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	183a      	adds	r2, r7, r0
 8003156:	8812      	ldrh	r2, [r2, #0]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	e066      	b.n	800322a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800315c:	231e      	movs	r3, #30
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e061      	b.n	800322a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003166:	231f      	movs	r3, #31
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d02f      	beq.n	80031d0 <UART_SetConfig+0x35c>
 8003170:	dc32      	bgt.n	80031d8 <UART_SetConfig+0x364>
 8003172:	2b04      	cmp	r3, #4
 8003174:	d00d      	beq.n	8003192 <UART_SetConfig+0x31e>
 8003176:	dc2f      	bgt.n	80031d8 <UART_SetConfig+0x364>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <UART_SetConfig+0x30e>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d005      	beq.n	800318c <UART_SetConfig+0x318>
 8003180:	e02a      	b.n	80031d8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003182:	f7ff fb73 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8003186:	0003      	movs	r3, r0
 8003188:	61bb      	str	r3, [r7, #24]
        break;
 800318a:	e02c      	b.n	80031e6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800318c:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <UART_SetConfig+0x358>)
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e029      	b.n	80031e6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003192:	f7ff fae1 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8003196:	0003      	movs	r3, r0
 8003198:	61bb      	str	r3, [r7, #24]
        break;
 800319a:	e024      	b.n	80031e6 <UART_SetConfig+0x372>
 800319c:	efff69f3 	.word	0xefff69f3
 80031a0:	ffffcfff 	.word	0xffffcfff
 80031a4:	fffff4ff 	.word	0xfffff4ff
 80031a8:	40013800 	.word	0x40013800
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40004400 	.word	0x40004400
 80031b4:	40004800 	.word	0x40004800
 80031b8:	40004c00 	.word	0x40004c00
 80031bc:	40005000 	.word	0x40005000
 80031c0:	40011400 	.word	0x40011400
 80031c4:	40011800 	.word	0x40011800
 80031c8:	40011c00 	.word	0x40011c00
 80031cc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	021b      	lsls	r3, r3, #8
 80031d4:	61bb      	str	r3, [r7, #24]
        break;
 80031d6:	e006      	b.n	80031e6 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031dc:	231e      	movs	r3, #30
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
        break;
 80031e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01e      	beq.n	800322a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	085a      	lsrs	r2, r3, #1
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	18d2      	adds	r2, r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0019      	movs	r1, r3
 80031fc:	0010      	movs	r0, r2
 80031fe:	f7fc ff81 	bl	8000104 <__udivsi3>
 8003202:	0003      	movs	r3, r0
 8003204:	b29b      	uxth	r3, r3
 8003206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	d909      	bls.n	8003222 <UART_SetConfig+0x3ae>
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	025b      	lsls	r3, r3, #9
 8003214:	429a      	cmp	r2, r3
 8003216:	d204      	bcs.n	8003222 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	60da      	str	r2, [r3, #12]
 8003220:	e003      	b.n	800322a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003222:	231e      	movs	r3, #30
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003236:	231e      	movs	r3, #30
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	781b      	ldrb	r3, [r3, #0]
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b008      	add	sp, #32
 8003242:	bd80      	pop	{r7, pc}

08003244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	2201      	movs	r2, #1
 8003252:	4013      	ands	r3, r2
 8003254:	d00b      	beq.n	800326e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a4a      	ldr	r2, [pc, #296]	; (8003388 <UART_AdvFeatureConfig+0x144>)
 800325e:	4013      	ands	r3, r2
 8003260:	0019      	movs	r1, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2202      	movs	r2, #2
 8003274:	4013      	ands	r3, r2
 8003276:	d00b      	beq.n	8003290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a43      	ldr	r2, [pc, #268]	; (800338c <UART_AdvFeatureConfig+0x148>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2204      	movs	r2, #4
 8003296:	4013      	ands	r3, r2
 8003298:	d00b      	beq.n	80032b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <UART_AdvFeatureConfig+0x14c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2208      	movs	r2, #8
 80032b8:	4013      	ands	r3, r2
 80032ba:	d00b      	beq.n	80032d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4a34      	ldr	r2, [pc, #208]	; (8003394 <UART_AdvFeatureConfig+0x150>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2210      	movs	r2, #16
 80032da:	4013      	ands	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a2c      	ldr	r2, [pc, #176]	; (8003398 <UART_AdvFeatureConfig+0x154>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	0019      	movs	r1, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2220      	movs	r2, #32
 80032fc:	4013      	ands	r3, r2
 80032fe:	d00b      	beq.n	8003318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	4a25      	ldr	r2, [pc, #148]	; (800339c <UART_AdvFeatureConfig+0x158>)
 8003308:	4013      	ands	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	2240      	movs	r2, #64	; 0x40
 800331e:	4013      	ands	r3, r2
 8003320:	d01d      	beq.n	800335e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <UART_AdvFeatureConfig+0x15c>)
 800332a:	4013      	ands	r3, r2
 800332c:	0019      	movs	r1, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	035b      	lsls	r3, r3, #13
 8003342:	429a      	cmp	r2, r3
 8003344:	d10b      	bne.n	800335e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	4a15      	ldr	r2, [pc, #84]	; (80033a4 <UART_AdvFeatureConfig+0x160>)
 800334e:	4013      	ands	r3, r2
 8003350:	0019      	movs	r1, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	2280      	movs	r2, #128	; 0x80
 8003364:	4013      	ands	r3, r2
 8003366:	d00b      	beq.n	8003380 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <UART_AdvFeatureConfig+0x164>)
 8003370:	4013      	ands	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b002      	add	sp, #8
 8003386:	bd80      	pop	{r7, pc}
 8003388:	fffdffff 	.word	0xfffdffff
 800338c:	fffeffff 	.word	0xfffeffff
 8003390:	fffbffff 	.word	0xfffbffff
 8003394:	ffff7fff 	.word	0xffff7fff
 8003398:	ffffefff 	.word	0xffffefff
 800339c:	ffffdfff 	.word	0xffffdfff
 80033a0:	ffefffff 	.word	0xffefffff
 80033a4:	ff9fffff 	.word	0xff9fffff
 80033a8:	fff7ffff 	.word	0xfff7ffff

080033ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2280      	movs	r2, #128	; 0x80
 80033b8:	2100      	movs	r1, #0
 80033ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033bc:	f7fd fca0 	bl	8000d00 <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2208      	movs	r2, #8
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d10c      	bne.n	80033ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2280      	movs	r2, #128	; 0x80
 80033d6:	0391      	lsls	r1, r2, #14
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <UART_CheckIdleState+0x8c>)
 80033dc:	9200      	str	r2, [sp, #0]
 80033de:	2200      	movs	r2, #0
 80033e0:	f000 f82c 	bl	800343c <UART_WaitOnFlagUntilTimeout>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d001      	beq.n	80033ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e021      	b.n	8003430 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2204      	movs	r2, #4
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d10c      	bne.n	8003414 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	03d1      	lsls	r1, r2, #15
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	4a0d      	ldr	r2, [pc, #52]	; (8003438 <UART_CheckIdleState+0x8c>)
 8003404:	9200      	str	r2, [sp, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	f000 f818 	bl	800343c <UART_WaitOnFlagUntilTimeout>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d001      	beq.n	8003414 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e00d      	b.n	8003430 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2274      	movs	r2, #116	; 0x74
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	01ffffff 	.word	0x01ffffff

0800343c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b094      	sub	sp, #80	; 0x50
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800344c:	e0a3      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003450:	3301      	adds	r3, #1
 8003452:	d100      	bne.n	8003456 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003454:	e09f      	b.n	8003596 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003456:	f7fd fc53 	bl	8000d00 <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <UART_WaitOnFlagUntilTimeout+0x30>
 8003466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003468:	2b00      	cmp	r3, #0
 800346a:	d13d      	bne.n	80034e8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800346c:	f3ef 8310 	mrs	r3, PRIMASK
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
 8003476:	2301      	movs	r3, #1
 8003478:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800347c:	f383 8810 	msr	PRIMASK, r3
}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	494c      	ldr	r1, [pc, #304]	; (80035c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800348e:	400a      	ands	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003494:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	f383 8810 	msr	PRIMASK, r3
}
 800349c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349e:	f3ef 8310 	mrs	r3, PRIMASK
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a6:	643b      	str	r3, [r7, #64]	; 0x40
 80034a8:	2301      	movs	r3, #1
 80034aa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	438a      	bics	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2274      	movs	r2, #116	; 0x74
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e067      	b.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	d050      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	401a      	ands	r2, r3
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	429a      	cmp	r2, r3
 8003506:	d146      	bne.n	8003596 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2280      	movs	r2, #128	; 0x80
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003512:	f3ef 8310 	mrs	r3, PRIMASK
 8003516:	613b      	str	r3, [r7, #16]
  return(result);
 8003518:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800351c:	2301      	movs	r3, #1
 800351e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f383 8810 	msr	PRIMASK, r3
}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4923      	ldr	r1, [pc, #140]	; (80035c0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003534:	400a      	ands	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800353a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f383 8810 	msr	PRIMASK, r3
}
 8003542:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003544:	f3ef 8310 	mrs	r3, PRIMASK
 8003548:	61fb      	str	r3, [r7, #28]
  return(result);
 800354a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354c:	64bb      	str	r3, [r7, #72]	; 0x48
 800354e:	2301      	movs	r3, #1
 8003550:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2101      	movs	r1, #1
 8003566:	438a      	bics	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	f383 8810 	msr	PRIMASK, r3
}
 8003574:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2220      	movs	r2, #32
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	2120      	movs	r1, #32
 8003588:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2274      	movs	r2, #116	; 0x74
 800358e:	2100      	movs	r1, #0
 8003590:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e010      	b.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69db      	ldr	r3, [r3, #28]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	4013      	ands	r3, r2
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	425a      	negs	r2, r3
 80035a6:	4153      	adcs	r3, r2
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	001a      	movs	r2, r3
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d100      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80035b4:	e74b      	b.n	800344e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b014      	add	sp, #80	; 0x50
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	fffffe5f 	.word	0xfffffe5f

080035c4 <__libc_init_array>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	2600      	movs	r6, #0
 80035c8:	4d0c      	ldr	r5, [pc, #48]	; (80035fc <__libc_init_array+0x38>)
 80035ca:	4c0d      	ldr	r4, [pc, #52]	; (8003600 <__libc_init_array+0x3c>)
 80035cc:	1b64      	subs	r4, r4, r5
 80035ce:	10a4      	asrs	r4, r4, #2
 80035d0:	42a6      	cmp	r6, r4
 80035d2:	d109      	bne.n	80035e8 <__libc_init_array+0x24>
 80035d4:	2600      	movs	r6, #0
 80035d6:	f000 f821 	bl	800361c <_init>
 80035da:	4d0a      	ldr	r5, [pc, #40]	; (8003604 <__libc_init_array+0x40>)
 80035dc:	4c0a      	ldr	r4, [pc, #40]	; (8003608 <__libc_init_array+0x44>)
 80035de:	1b64      	subs	r4, r4, r5
 80035e0:	10a4      	asrs	r4, r4, #2
 80035e2:	42a6      	cmp	r6, r4
 80035e4:	d105      	bne.n	80035f2 <__libc_init_array+0x2e>
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	00b3      	lsls	r3, r6, #2
 80035ea:	58eb      	ldr	r3, [r5, r3]
 80035ec:	4798      	blx	r3
 80035ee:	3601      	adds	r6, #1
 80035f0:	e7ee      	b.n	80035d0 <__libc_init_array+0xc>
 80035f2:	00b3      	lsls	r3, r6, #2
 80035f4:	58eb      	ldr	r3, [r5, r3]
 80035f6:	4798      	blx	r3
 80035f8:	3601      	adds	r6, #1
 80035fa:	e7f2      	b.n	80035e2 <__libc_init_array+0x1e>
 80035fc:	0800366c 	.word	0x0800366c
 8003600:	0800366c 	.word	0x0800366c
 8003604:	0800366c 	.word	0x0800366c
 8003608:	08003670 	.word	0x08003670

0800360c <memset>:
 800360c:	0003      	movs	r3, r0
 800360e:	1882      	adds	r2, r0, r2
 8003610:	4293      	cmp	r3, r2
 8003612:	d100      	bne.n	8003616 <memset+0xa>
 8003614:	4770      	bx	lr
 8003616:	7019      	strb	r1, [r3, #0]
 8003618:	3301      	adds	r3, #1
 800361a:	e7f9      	b.n	8003610 <memset+0x4>

0800361c <_init>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr

08003628 <_fini>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr
